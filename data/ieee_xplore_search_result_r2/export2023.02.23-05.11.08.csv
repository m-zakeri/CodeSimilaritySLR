"Document Title",Authors,"Author Affiliations","Publication Title",Date Added To Xplore,"Publication Year","Volume","Issue","Start Page","End Page","Abstract","ISSN",ISBNs,"DOI",Funding Information,PDF Link,"Author Keywords","IEEE Terms","INSPEC Controlled Terms","INSPEC Non-Controlled Terms","Mesh_Terms",Article Citation Count,Patent Citation Count,"Reference Count","License",Online Date,Issue Date,"Meeting Date","Publisher",Document Identifier
"Comparing Agile Software Processes Based on the Software Development Project Requirements","M. Qasaimeh; H. Mehrfard; A. Hamou-Lhadj","Department of Electrical and Computer Engineering, Concordia University, Montreal, QUE, Canada; Department of Electrical and Computer Engineering, Concordia University, Montreal, QUE, Canada; Department of Electrical and Computer Engineering, Concordia University, Montreal, QUE, Canada","2008 International Conference on Computational Intelligence for Modelling Control & Automation","24 Jul 2009","2008","","","49","54","Agile software development principles and methodologies have gained a lot of popularity in recent years. Unlike traditional software processes, agile processes advocate flexible practices that allow coping with changing requirements. Recently, several agile processes have been proposed, which differ in a variety of ways. In this paper, we analyze the characteristics of many agile processes and classify them based on key requirements for a software development project. The objective is to help project managers and software engineers select an agile process that is most suitable to the requirements of their software projects.","","978-0-7695-3514-2","10.1109/CIMCA.2008.54","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5172598","","Programming;Project management;Software maintenance;Engineering management;Software engineering;Software standards;Collaborative software;Collaborative work;Business communication;Documentation","project management;software development management;software prototyping","agile software processes;software development project requirements;flexible practices;changing requirements","","7","","14","IEEE","24 Jul 2009","","","IEEE","IEEE Conferences"
"Clonetracker","E. Duala-Ekoko; M. Robillard","School of Computer Science, McGill University, Montreal, QUE, Canada; School of Computer Science, McGill University, Montreal, QUE, Canada","2008 ACM/IEEE 30th International Conference on Software Engineering","14 Apr 2009","2008","","","843","846","Code clones are generally considered to be an obstacle to software maintenance. Research has provided evidence that it may not always be practical, feasible, or cost-effective to eliminate certain clone groups through refactoring. This paper describes CloneTracker, an Eclipse plug-in that provides support for tracking code clones in evolving software. With CloneTracker, developers can specify clone groups they wish to track, and the tool will automatically generate a clone model that is robust to changes to the source code, and can be shared with other collaborators of the project. When future modifications intersect with tracked clones, CloneTracker will notify the developer, provide support to consistently apply changes to a corresponding clone region, and provide support for updating the clone model. CloneTracker complements existing techniques by providing support for reusing knowledge about the location of clones in source code, and support for keeping track of clones when refactoring is not desirable.","1558-1225","978-1-60558-079-1","10.1145/1368088.1368218","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4814206","code clone;refactoring;simultaneous editing;software maintenance;source code analysis","Cloning;Software maintenance;Robustness;Collaborative tools;Logic programming;Software systems;Computer science;Computer languages;Writing;History","program diagnostics;software maintenance;software reusability;software tools","CloneTracker;code clone management;tool support;software maintenance;software refactoring;software evolution;software reuse","","29","","9","","14 Apr 2009","","","IEEE","IEEE Conferences"
"Scalable detection of semantic clones","M. Gabel; L. Jiang; Z. Su","Department of Computer Science, University of California, Davis, USA; Department of Computer Science, University of California, Davis, USA; Department of Computer Science, University of California, Davis, USA","2008 ACM/IEEE 30th International Conference on Software Engineering","14 Apr 2009","2008","","","321","330","Several techniques have been developed for identifying similar code fragments in programs. These similar fragments, referred to as code clones, can be used to identify redundant code, locate bugs, or gain insight into program design. Existing scalable approaches to clone detection are limited to finding program fragments that are similar only in their contiguous syntax. Other, semantics-based approaches are more resilient to differences in syntax, such as reordered statements, related statements interleaved with other unrelated statements, or the use of semantically equivalent control structures. However, none of these techniques have scaled to real world code bases. These approaches capture semantic information from Program Dependence Graphs (PDGs), program representations that encode data and control dependencies between statements and predicates. Our definition of a code clone is also based on this representation: we consider program fragments with isomorphic PDGs to be clones. In this paper, we present the first scalable clone detection algorithm based on this definition of semantic clones. Our insight is the reduction of the difficult graph similarity problem to a simpler tree similarity problem by mapping carefully selected PDG subgraphs to their related structured syntax. We efficiently solve the tree similarity problem to create a scalable analysis. We have implemented this algorithm in a practical tool and performed evaluations on several million-line open source projects, including the Linux kernel. Compared with previous approaches, our tool locates significantly more clones, which are often more semantically interesting than simple copied and pasted code fragments.","1558-1225","978-1-60558-079-1","10.1145/1368088.1368132","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4814143","clone detection;program dependence graph;refactoring;software maintenance","Cloning;Tree graphs;Software maintenance;Computer science;Computer bugs;Detection algorithms;Performance evaluation;Linux;Kernel;Software algorithms","data flow graphs;Linux;program compilers;program control structures;program debugging;trees (mathematics)","scalable detection;semantic clones;program code fragments;code clones;redundant code;bugs location;program design;program fragments;contiguous syntax;reordered statements;semantically equivalent control structures;real world code bases;semantic information;program dependence graphs;program representations;isomorphic PDG;scalable clone detection algorithm;graph similarity problem;tree similarity problem;PDG subgraphs;structured syntax;million-line open source projects;Linux kernel","","104","5","21","","14 Apr 2009","","","IEEE","IEEE Conferences"
"Clone detection in automotive model-based development","F. Deissenboeck; B. Hummel; E. Jürgens; B. Schätz; S. Wagner; J. -F. Girard; S. Teuchert","Institut für Informatik, Garching b. München, München, Germany; Institut für Informatik, Garching b. München, München, Germany; Technische Universitat Munchen, Munchen, Bayern, DE; Institut für Informatik, Garching b. München, Germany; Institut für Informatik, Garching b. München, München, Germany; MAN Nutzfahrzeuge AG, Elektronik Regelungs- und Steuerungssysteme München, München, Germany; MAN Nutzfahrzeuge AG, Elektronik Regelungs- und Steuerungssysteme München, München, Germany","2008 ACM/IEEE 30th International Conference on Software Engineering","14 Apr 2009","2008","","","603","612","Model-based development is becoming an increasingly common development methodology. In important domains like embedded systems already major parts of the code are generated from models specified with domain-specific modelling languages. Hence, such models are nowadays an integral part of the software development and maintenance process and therefore have a major economic and strategic value for the software-developing organisations. Nevertheless almost no work has been done on a quality defect that is known to seriously hamper maintenance productivity in classic code-based development: Cloning. This paper presents an approach for the automatic detection of clones in large models as they are used in model-based development of control systems. The approach is based on graph theory and hence can be applied to most graphical data-flow languages. An industrial case study demonstrates the applicability of our approach for the detection of clones in Matlab/Simulink models that are widely used in model-based development of embedded systems in the automotive domain.","1558-1225","978-1-60558-079-1","10.1145/1368088.1368172","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4814172","clone detection;data-flow;matlab/simulink;model clone","Cloning;Automotive engineering;Mathematical model;Embedded system;Programming;Software maintenance;Productivity;Control system synthesis;Automatic control;Graph theory","automotive engineering;embedded systems;graph theory;program diagnostics;software maintenance;software quality;software reusability","automatic clone detection;automotive model-based development;embedded system;domain-specific modelling language;software development;software maintenance productivity;software-development organisation;quality defect;classic code-based development;control system;graph theory;graphical data-flow language;Matlab/Simulink model;software reusability","","30","","28","","14 Apr 2009","","","IEEE","IEEE Conferences"
"Mining framework usage changes from instantiation code","T. Schäfer; J. Jonas; M. Mezini","Software Technology Group, Darmstadt University of Technology, Germany; Software Technology Group, Darmstadt University of Technology, Germany; Software Technology Group, Darmstadt University of Technology, Germany","2008 ACM/IEEE 30th International Conference on Software Engineering","14 Apr 2009","2008","","","471","480","Framework evolution may break existing users, which need to be migrated to the new framework version. This is a tedious and error-prone process that benefits from automation. Existing approaches compare two versions of the framework code in order to find changes caused by refactorings. However, other kinds of changes exist, which are relevant for the migration. In this paper, we propose to mine framework usage change rules from already ported instantiations, the latter being applications build on top of the framework, or test cases maintained by the framework developers. Our evaluation shows that our approach finds usage changes not only caused by refactorings, but also by conceptual changes within the framework. Further, it copes well with some issues that plague tools focusing on finding refactorings such as deprecated program elements or multiple changes applied to a single program element.","1558-1225","978-1-60558-079-1","10.1145/1368088.1368153","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4814158","evolution;framework comprehension;migration","Automation;Testing;Software engineering;Software maintenance;Software systems;Permission;Data mining;Software reusability;Software design;Guidelines","data mining;software maintenance;software reusability","error-prone process;refactorings;instantiation code;framework usage change mining","","30","","28","","14 Apr 2009","","","IEEE","IEEE Conferences"
"Granularity in software product lines","C. Kästner; S. Apel; M. Kuhlemann","School of Computer Science, University of Magdeburg, Germany; Department of Informatics and Mathematics, University of Passau, Germany; School of Computer Science, University of Magdeburg, Germany","2008 ACM/IEEE 30th International Conference on Software Engineering","14 Apr 2009","2008","","","311","320","Building software product lines (SPLs) with features is a challenging task. Many SPL implementations support features with coarse granularity - e.g., the ability to add and wrap entire methods. However, fine-grained extensions, like adding a statement in the middle of a method, either require intricate workarounds or obfuscate the base code with annotations. Though many SPLs can and have been implemented with the coarse granularity of existing approaches, fine-grained extensions are essential when extracting features from legacy applications. Furthermore, also some existing SPLs could benefit from fine-grained extensions to reduce code replication or improve readability. In this paper, we analyze the effects of feature granularity in SPLs and present a tool, called Colored IDE (CIDE), that allows features to implement coarse-grained and fine-grained extensions in a concise way. In two case studies, we show how CIDE simplifies SPL development compared to traditional approaches.","1558-1225","978-1-60558-079-1","10.1145/1368088.1368131","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4814142","feature refactoring;ide;software product lines;virtual separation of concerns","Software tools;Design engineering;Computer science;Permission;Informatics;Mathematics;Feature extraction;Software design;Spatial databases;Transaction databases","software engineering","software product lines;coarse granularity;code replication;colored IDE","","67","","54","","14 Apr 2009","","","IEEE","IEEE Conferences"
"Breaking the barriers to successful refactoring","E. Murphy-Hill; A. Black","Portland State University, Portland, OR, USA; Portland State University, Portland, OR, USA","2008 ACM/IEEE 30th International Conference on Software Engineering","14 Apr 2009","2008","","","421","430","Refactoring is the process of changing the structure of code without changing its behavior. Refactoring can be semi-automated with tools, which should make it easier for programmers to refactor quickly and correctly. However, we have observed that many tools do a poor job of communicating errors triggered by the refactoring process and that programmers using them sometimes refactor slowly, conservatively, and incorrectly. In this paper we characterize problems with current refactoring tools, demonstrate three new tools to assist in refactoring, and report on a user study that compares these new tools against existing tools. The results of the study show that speed, accuracy, and user satisfaction can be significantly increased. From the new tools we induce a set of usability recommendations that we hope will help inspire a new generation of programmer-friendly refactoring tools.","1558-1225","978-1-60558-079-1","10.1145/1368088.1368146","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4814153","environments;refactoring;tools;usability","Programming profession;Usability","software tools","extract method;refactoring process;programmer-friendly refactoring tools;code structure","","30","1","26","","14 Apr 2009","","","IEEE","IEEE Conferences"
"Tracking source locations","S. Reiss","Department of Computer Science, Brown University, Providence, RI, USA","2008 ACM/IEEE 30th International Conference on Software Engineering","14 Apr 2009","2008","","","11","20","Many programming tools require information to be associated with source locations. Current tools do this in different ways with different degrees of effectiveness. This paper is an investigation into the various approaches to maintaining source locations. It is based on an experiment that attempts to track a variety of locations over the evolution of a source file. The results demonstrate that relatively simple techniques can be very effective.","1558-1225","978-1-60558-079-1","10.1145/1368088.1368091","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4814112","software evolution;source lines;tool support","Position measurement;Programming profession;Animation;Computer science;Computer bugs;Java;Visualization;Software algorithms;Radio access networks;Maintenance engineering","software tools","source location tracking;programming tools;source file","","21","1","27","","14 Apr 2009","","","IEEE","IEEE Conferences"
"Impact of metrics based refactoring on the software quality: a case study","S. V. Shrivastava; V. Shrivastava","Symbiosis Centre for Information Technology (SCIT), Constituent of Symbiosis International University, Pune, India; IBM India Private Limited, Pune, India","TENCON 2008 - 2008 IEEE Region 10 Conference","27 Jan 2009","2008","","","1","6","As the software system changes, the design of the software deteriorates hence reducing the quality of the system. This paper presents a case study in which an inventory application is considered and efforts are made to improve the quality of the system by refactoring. The code is an open source application namely ldquoinventor deluxe v 1.03rdquo, which was first, assessed using the tool Metrics 1.3.6 (an Eclipse plug-in). The code was then refactored and three more versions were built. At the end of creation of every version the code was assessed to find the improvement in the quality. The results obtained after measuring various metrics helped in tracing the spots in the code, which requires further improvement and hence can be refactored. Most of the refactoring was done manually with little tool support. Finally, a trend was found which shows, that average complexity and size of the code reduces with refactoring - based development, which helps to make the software more maintainable. Thus, although refactoring is time consuming and a labor-intensive work, it has a positive impact on the software quality.","2159-3450","978-1-4244-2408-5","10.1109/TENCON.2008.4766459","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4766459","refactoring;code smells;software metrics;software inspection","Software quality;Open source software;Inspection;Software systems;Software design;Software maintenance;Symbiosis;Application software;Switches;Information technology","software metrics;software quality;software tools","software quality;inventory application;tool support;average complexity;labor-intensive work","","2","","12","IEEE","27 Jan 2009","","","IEEE","IEEE Conferences"
"Towards SOA-Based Code Defect Analysis","Q. Wang; N. Meng; Z. Zhou; J. Li; H. Mei","School of Electronics Engineering and Computer Science, Key Laboratory of High Confidence Software Technologies, Ministry of Education, Peking University, Beijing, China; School of Electronics Engineering and Computer Science, Key Laboratory of High Confidence Software Technologies, Ministry of Education, Peking University, Beijing, China; School of Electronics Engineering and Computer Science, Key Laboratory of High Confidence Software Technologies, Ministry of Education, Peking University, Beijing, China; School of Electronics Engineering and Computer Science, Key Laboratory of High Confidence Software Technologies, Ministry of Education, Peking University, Beijing, China; School of Electronics Engineering and Computer Science, Key Laboratory of High Confidence Software Technologies, Ministry of Education, Peking University, Beijing, China","2008 IEEE International Symposium on Service-Oriented System Engineering","30 Dec 2008","2008","","","269","274","Static code analysis is the analysis of software that is performed to acquire information concerning the dynamic behavior of programs built from that software, without actually executing the programs. Currently, most analysis techniques are implemented as independent tools, or plugins for integrate development environment (IDE, e.g., Eclipse). However, in this paper, we introduce a new way to release the analyzing ability: a Web Service based approach, which can integrate multiple analysis tools, and provides analyzing ability by way of standard Web Service interface. The user can benefit code analyzing ability by just submit the code to be analyzed to the service, without download any analyzing tools, and then get the merged result. The experiment shows that the proposed approach is feasible and efficient.","","978-0-7695-3499-2","10.1109/SOSE.2008.47","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4730498","SOA;code analyzing;code defect","Information analysis;Performance analysis;Software performance;Software tools;Application software;Web services;Software engineering;Systems engineering and theory;Computer science;Laboratories","codes;software architecture;Web services","SOA;code defect analysis;static code analysis;Web service","","4","","13","IEEE","30 Dec 2008","","","IEEE","IEEE Conferences"
"Structural Optimization on Superscalar Processors","X. Zhao","Dept. of Finance, Beihua Univ., Jilin","2008 International Conference on Computer Science and Software Engineering","22 Dec 2008","2008","3","","427","430","Superblock scheduling is a common technique to increase the level of instruction level parallelism (ILP) in generated code. Compared to a basic block, the superblock gives an optimizer or scheduler a longer range over which instructions can be moved. The bookkeeping necessary to execute that move is less than would be necessary inside an arbitrary trace region. Additionally, the process of forming superblocks generates more instructions that are eligible for movement. These factors combine to produce a significant increase in the ILP of a section of code. This work investigates the effect of structural optimization when targeting an x86 processor. We show that the effect of structural compilation to specialize the control flow for the typical path of execution is still beneficial.","","978-0-7695-3336-0","10.1109/CSSE.2008.574","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4722376","Structural Optimization;Superscalar Processors","Processor scheduling;Dynamic scheduling;Parallel processing;Flow graphs;Linux;Computer science;Software engineering;Finance;Computer aided instruction;Concurrent computing","parallel processing;program compilers;scheduling","structural optimization;superscalar processors;superblock scheduling;instruction level parallelism;code generation;x86 processor;structural compilation","","","","4","IEEE","22 Dec 2008","","","IEEE","IEEE Conferences"
"Learning software engineering principles using open source software","J. Nandigam; V. N. Gudivada; A. Hamou-Lhadj","Grand Valley State University, Allendale, MI, US; Marshall University, Huntington, WV, US; Canada","2008 38th Annual Frontiers in Education Conference","22 Dec 2008","2008","","","S3H-18","S3H-23","Traditional lectures espousing software engineering principles hardly engage studentspsila attention due to the fact that students often view software engineering principles as mere academic concepts without a clear understanding of how they can be used in practice. Some of the issues that contribute to this perception include lack of experience in writing and understanding large programs, and lack of opportunities for inspecting and maintaining code written by others. To address these issues, we have worked on a project whose overarching goal is to teach students a subset of basic software engineering principles using source code exploration as the primary mechanism. We attempted to espouse the following software engineering principles and concepts: role of coding conventions and coding style, programming by intention to develop readable and maintainable code, assessing code quality using software metrics, refactoring, and reverse engineering to recover design elements. Student teams have examined the following open source Java code bases: ImageJ, Apache Derby, Apache Lucene, Hibernate, and JUnit. We have used Eclipse IDE and relevant plug-ins in this project.","2377-634X","978-1-4244-1969-2","10.1109/FIE.2008.4720643","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4720643","Eclipse;Open source software;Source code exploration;Software engineering education","Software engineering;Open source software;Writing;Programming profession;Java;Computer science;Algorithm design and analysis;Software metrics;Reverse engineering;Application software","computer science education","open source software;source code exploration;software engineering education;students","","25","","15","IEEE","22 Dec 2008","","","IEEE","IEEE Conferences"
"FR010","M. Tranchero; C. Sansoe","Dipartimento di Elettronica, Politecnico di Turino, Torino, Italy; Dipartimento di Elettronica, Politecnico di Turino, Torino, Italy","2008 17th IEEE International Symposium on the Applications of Ferroelectrics","2 Dec 2008","2008","2","","1","2","This paper describes how a ferroelectric RAM from Ramtron has been used to increase the reliability of PiCPoT, a small satellite developed at Politecnico di Torino for educational purposes. It compares the FeRAM solution with respect to a FLASH one. The memories are used for saving housekeeping telemetry data while the satellite is far from the ground station. Due to the intrinsic radiation tolerance and the lower power consumption, FeRAM are very suitable for the application.","2375-0448","978-1-4244-2744-4","10.1109/ISAF.2008.4693722","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4693722","","Random access memory;Nonvolatile memory;Ferroelectric films;Satellites;Orbits;Reliability;Power supplies","","","","","","5","IEEE","2 Dec 2008","","","IEEE","IEEE Conferences"
"Evaluating the relation between changeability decay and the characteristics of clones and methods","A. Lozano; M. Wermelinger; B. Nuseibeh","Computing Department and Centre for Research in Computing, Open University, UK; Computing Department and Centre for Research in Computing, Open University, UK; Computing Department and Centre for Research in Computing, Open University, UK","2008 23rd IEEE/ACM International Conference on Automated Software Engineering - Workshops","25 Nov 2008","2008","","","100","109","In this paper we propose a methodology to evaluate if there is a relation between two code characteristics. The methodology is based on relative risk, an epidemiology formula used to analyze the effect of toxic agents in developing diseases. We present a metaphor in which the disease is changeability decay, measured at method level, and the toxic agent is a source code characteristic considered harmful. However, the formula assesses the strength of the relation between any toxic agent and any disease. We apply the methodology to explore cloning as a toxic agent that increases the risk of changeability decay. Cloning is a good agent to analyze given that although there is some evidence of maintainability issues caused by clones, we do not know which clones are harmful, or to what extent. We compare cloning with other possible dasiatoxic agentspsila, like having high complexity or having high fan-in. We also use the technique to evaluate which clone characteristics (like clone size) may indicate harmful clones, by testing such characteristics as toxic agents. We found that cloning is one of the method characteristics that affects the least changeability decay, and that none of the clone characteristics analyzed are related with changeability decay.","2151-0849","978-1-4244-2776-5","10.1109/ASEW.2008.4686327","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4686327","","Cloning;Computer bugs;Diseases;Risk analysis;Testing;Phase measurement;Software measurement;Software maintenance;Application software","diseases;medical computing;software engineering","changeability decay;epidemiology formula;toxic agents;diseases;cloning;maintainability issues","","8","","22","IEEE","25 Nov 2008","","","IEEE","IEEE Conferences"
"Using n-grams to rapidly characterise the evolution of software code","A. Rainer; P. C. R. Lane; J. A. Malcolm; S. -B. Scholz","School of Computer Science, University of Hertfordshire College Lane Campus, Hertfordshire, UK; School of Computer Science, University of Hertfordshire College Lane Campus, Hertfordshire, UK; School of Computer Science, University of Hertfordshire College Lane Campus, Hertfordshire, UK; School of Computer Science, University of Hertfordshire College Lane Campus, Hertfordshire, UK","2008 23rd IEEE/ACM International Conference on Automated Software Engineering - Workshops","25 Nov 2008","2008","","","43","52","Text-based approaches to the analysis of software evolution are attractive because of the fine-grained, token-level comparisons they can generate. The use of such approaches has, however, been constrained by the lack of an efficient implementation. In this paper we demonstrate the ability of Ferret, which uses n-grams of 3 tokens, to characterise the evolution of software code. Ferretpsilas implementation operates in almost linear time and is at least an order of magnitude faster than the diff tool. Ferretpsilas output can be analysed to reveal several characteristics of software evolution, such as: the lifecycle of a single file, the degree of change between two files, and possible regression. In addition, the similarity scores produced by Ferret can be aggregated to measure larger parts of the system being analysed.","2151-0849","978-1-4244-2776-5","10.1109/ASEW.2008.4686320","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4686320","","Software systems;Application software;Cloning;Software performance;Software measurement;Performance analysis;Information retrieval;Computer science;Educational institutions;Computer languages","software engineering;systems analysis","software code evolution;text-based approaches;Ferret ability;systems analysis","","5","","21","IEEE","25 Nov 2008","","","IEEE","IEEE Conferences"
"Analyzing Automated Maintenance architectures to provide flexible smart maintenance capabilities","C. Kirkos; R. Meseroll; G. Edwards; M. Fehskens","Naval Air Systems Command, Lakehurst, NJ, USA; Naval Air Systems Command, Lakehurst, NJ, USA; Naval Air Systems Command, Lakehurst, NJ, USA; Naval Air Systems Command, Lakehurst, NJ, USA","2008 IEEE AUTOTESTCON","31 Oct 2008","2008","","","382","388","The computing architecture of an Automated Maintenance Environment (AME) can foster or stunt the ability to employ smart maintenance practices. With software decision support technologies becoming more readily available, there is ample opportunity for diagnostic enhancement within AMEpsilas. Data analysis practices and informed decision support are enabled by an enhanced technical infrastructure, which includes data accessibility, common data formats, and sufficient computational capacity. This paper will explain the results of the IDATS teampsilas efforts in creating a lab architecture to facilitate diagnostic analysis and how it further applies in a functioning smart AME. Additionally, the paper will address the computing and decision support software requirements needed to perform efficient maintenance practices within the US Navy, as well as provide an analysis of the strengths and shortcomings of existing Navy AME architectures. Potential change-points or limitations resulting from the existing AME architecture will be identified. This analysis will recognize common data points within the AME that can be improved or augmented to benefit multiple aircraft platforms with the capability of enhanced common diagnostic techniques. The steps toward realizing a common, flexible maintenance capability were investigated by analyzing the structure of all current and in-development Navy aircraft AMEs, including the data storage format, the movement of data, and the network infrastructure. A common Navy AME architecture will facilitate timely insertion of new and enhanced diagnostic techniques as they are developed, providing the fleet with intelligent support equipment at the flight line.","1558-4550","978-1-4244-2225-8","10.1109/AUTEST.2008.4662645","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4662645","Automated Maintenance Environment (AME);Computing Architecture;Data Mining;Text Mining;Web Services;SOA;Distributed Systems;Fleet Wide Readiness;Operational Availability","Maintenance engineering;Computer architecture;Servers;Aircraft;Data mining;Service oriented architecture;Software","data mining;decision support systems","automated maintenance architectures;flexible smart maintenance capabilities;software decision support technologies;computing architecture;data mining;text mining;Web services;distributed systems;operational availability","","2","","13","IEEE","31 Oct 2008","","","IEEE","IEEE Conferences"
"Towards a Benchmark for Evaluating Reverse Engineering Tools","L. J. Fülöp; P. Hegedus; R. Ferenc; T. Gyimóthy","Department of Software Engineering, University of Szeged, Hungary; Department of Software Engineering, University of Szeged, Hungary; Department of Software Engineering, University of Szeged, Hungary; Department of Software Engineering, University of Szeged, Hungary","2008 15th Working Conference on Reverse Engineering","24 Oct 2008","2008","","","335","336","In this paper we present work in progress towards implementing a benchmark called BEFRIEND (BEnchmark For Reverse engInEering tools workiNg on source coDe), with which the outputs of reverse engineering tools can be evaluated and compared easily and efficiently. Such tools are e.g. design pattern miners, duplicated code detectors and coding rule violation checkers. BEFRIEND supports different kinds of tool families, programming languages and software systems, and it enables the users to define their own evaluation criteria.","2375-5369","978-0-7695-3429-9","10.1109/WCRE.2008.18","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4656431","Benchmark;reverse engineering tools;tool evaluation","Benchmark testing;Reverse engineering;Accuracy;Cloning;Pattern recognition;Detectors;Java","reverse engineering;software tools","reverse engineering tools;BEFRIEND;source code;programming languages;software systems","","","","5","IEEE","24 Oct 2008","","","IEEE","IEEE Conferences"
"A Business Process Explorer: Recovering Business Processes from Business Applications","J. Guo; Y. Zou","School of Computing, Queen''s University Belfast, Kingston, ONT, Canada; Department of Electrical and Computer Engineering, Queen''s University Belfast, Kingston, ONT, Canada","2008 15th Working Conference on Reverse Engineering","24 Oct 2008","2008","","","333","334","A business process contains a set of logically related tasks executed to fulfill business goals. Business applications enable organizations to automatically perform their daily operations. Business processes and business applications keep on changing independently due to dynamic business environments. Therefore, business process definitions are rarely up-to-dated to reflect the processes deployed in business applications. This inconsistency creates difficulties for the communications between business analysts and software developers. We present a business process explorer tool which automatically recovers business processes from business applications and refines the process definitions by detecting business task clones which have similar functionality across processes.","2375-5369","978-0-7695-3429-9","10.1109/WCRE.2008.25","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4656430","","Business;Cloning;Software;XML;Organizations;Visualization;Books","business data processing;business process re-engineering","business process explorer;business process recovering;business applications;business task clones","","7","","5","IEEE","24 Oct 2008","","","IEEE","IEEE Conferences"
"Benchmarking Technical Quality of Software Products","J. P. Correia; J. Visser","Software Improvement Group, Amsterdam, Netherlands; Software Improvement Group, Amsterdam, Netherlands","2008 15th Working Conference on Reverse Engineering","24 Oct 2008","2008","","","297","300","To enable systematic comparison of technical quality of (groups of) software products, we have collected measurement data of a wide range of systems into a benchmark repository. The measurements were taken over the course of several years of delivering software assessment services to corporations and public institutes. The granularity of the collected data follows the layered structure of a model for software product quality, based on the ISO/IEC 9126 international standard, which we developed previously. In this paper, we describe the design of our benchmark repository, and we explain how it can be used to perform comparisons of systems. To provide a concrete illustration of the concept without revealing confidential data, we use a selection of open source systems as example.","2375-5369","978-0-7695-3429-9","10.1109/WCRE.2008.16","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4656421","Software product quality;ISO/IEC 9126;benchmarking","Software;Benchmark testing;Complexity theory;Java;ISO;Web server;Fires","software metrics;software quality","software products technical quality;benchmark repository;software assessment services;open source systems","","15","","13","IEEE","24 Oct 2008","","","IEEE","IEEE Conferences"
"Reconsidering Classes in Procedural Object-Oriented Code","M. U. Bhatti; S. Ducasse; M. Huchard","CRI-Univ. Paris 1 Sorbonne, France; INRIA-Lille Nord Europe, France; LIRMM-Univ. Montpellier 2, Montpellier, France","2008 15th Working Conference on Reverse Engineering","24 Oct 2008","2008","","","257","266","Object-oriented software may show signs of procedural thinking because of lack of design or due to design erosion over a period of time. We refer to such a software as procedural object-oriented code. Huge classes, scarce class hierarchies and absence of classes for domain entities are hallmarks of procedural object-oriented code. Due to huge investments in such systems, software restructuring becomes necessary. To support code modularization, it is important to identify useful domain abstractions. In this paper, we present a tool-assisted technique to identify useful abstractions and class hierarchies in procedural object-oriented code. During this task, principal classes (draft classes) are identified. Afterwards, composition and association relationships are inferred for principal classes. Lastly, Formal Concept Analysis (FCA) is used to analyze hierarchical relationships between methods and attributes within principal classes. We validated our approach on several case studies and report our results on an industrial case.","2375-5369","978-0-7695-3429-9","10.1109/WCRE.2008.58","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4656417","Reverse Engineering;Software Restructuring;Object Identification","Object recognition;Software;Lattices;Scattering;Evolution (biology);Software design;Software systems","formal languages;object-oriented languages;software engineering","procedural object-oriented code;object-oriented software;sofiware restructuring;code modularization;tool-assisted technique;principal classes;formal concept analysis","","2","","27","IEEE","24 Oct 2008","","","IEEE","IEEE Conferences"
"Mining Coding Patterns to Detect Crosscutting Concerns in Java Programs","T. Ishio; H. Date; T. Miyake; K. Inoue","Osaka University, Toyonaka, Osaka, Japan; Osaka University, Toyonaka, Osaka, Japan; Osaka University, Toyonaka, Osaka, Japan; Osaka University, Toyonaka, Osaka, Japan","2008 15th Working Conference on Reverse Engineering","24 Oct 2008","2008","","","123","132","A coding pattern is a frequent sequence of method calls and control statements to implement a particular behavior. Coding patterns include copy-and-pasted code, crosscutting concerns and implementation idioms. Duplicated code fragments and crosscutting concerns that spread across modules are problematic in software maintenance. In this paper, we propose a sequential pattern mining approach to capture coding patterns in Java programs. We have defined a set of rules to translate Java source code into a sequence database for pattern mining, and applied PrefixSpan algorithm to the sequence database. As a case study, we have applied our tool to six open-source programs and manually investigated the resultant patterns. We report coding patterns that are candidates of aspects and several logging patterns that are well-known crosscutting concerns but hard to modularize.","2375-5369","978-0-7695-3429-9","10.1109/WCRE.2008.28","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4656401","Aspect Mining;Sequential Pattern Mining;Software Maintenance;Static Analysis;Java","Databases;Encoding;Java;Software;Cloning;Filtering;Graphical user interfaces","data mining;Java;program interpreters;public domain software;software maintenance;software tools","open source Java program;sequential coding pattern mining;crosscutting concern detection;frequent method call sequence;copy-and-pasted code;duplicated code fragment;software maintenance;Java source code translation;sequence database;prefixspan algorithm;Fung pattern mining tool","","8","","26","IEEE","24 Oct 2008","","","IEEE","IEEE Conferences"
"Detecting Clones in Business Applications","J. Guo; Y. Zou","School of Computing, Queen''s University Belfast, Kingston, ONT, Canada; Department of Electrical and Computer Engineering, Queen''s University Belfast, Kingston, ONT, Canada","2008 15th Working Conference on Reverse Engineering","24 Oct 2008","2008","","","91","100","A business application automates a collection of business processes. A business process describes how a set of logically related tasks are executed, ordered and managed by following business rules to achieve business objectives. An online bookstore business application contains several tasks such as buying a book, ordering a book, and sending out promotions. Business analysts specify business tasks and software developers implement these tasks. Throughout the lifetime of a business application, business analysts may clone (e.g., copy and slightly modify) business processes to handle special circumstances or promotions. Identifying these clones and removing them helps improve the efficiency of an organization. However most clone detection techniques are source code based not business process based. In this paper, we propose an approach that makes use of traditional source code detection techniques to detect clones in business applications. The effectiveness of our approach is demonstrated through a case study on 10 large open source business applications in the Apache Open for Business Project.","2375-5369","978-0-7695-3429-9","10.1109/WCRE.2008.12","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4656398","Clone detections;Business proecesses;Business applications","Business;Cloning;Books;XML;Organizations;HTML;Data mining","electronic commerce;retail data processing;software cost estimation;software maintenance;software metrics","clone detection techniques;business process;business objective;online bookstore business application;software developer;source code;e-commerce application;software maintenance effort cost reduction;software metrics","","6","","32","IEEE","24 Oct 2008","","","IEEE","IEEE Conferences"
"An Empirical Study of Function Clones in Open Source Software","C. K. Roy; J. R. Cordy","School of Computing, Queen''s University Belfast, Kingston, ONT, Canada; School of Computing, Queen''s University Belfast, Kingston, ONT, Canada","2008 15th Working Conference on Reverse Engineering","24 Oct 2008","2008","","","81","90","The new hybrid clone detection tool NICAD combines the strengths and overcomes the limitations of both text-based and AST-based clone detection techniques to yield highly accurate identification of cloned code in software systems. In this paper, we present a first empirical study of function clones in open source software using NICAD. We examine more than 15 open source C and Java systems, including the entire Linux Kernel and Apache httpd, and analyze their use of cloned code in several different dimensions, including language, clone size, clone location and clone density by proportion of cloned functions. We manually verify all detected clones and provide a complete catalogue of different clones in an online repository in a variety of formats. These validated results can be used as a cloning reference for these systems and as a benchmark for evaluating other clone detection tools.","2375-5369","978-0-7695-3429-9","10.1109/WCRE.2008.54","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4656397","Function Clones;Empirical Study;Open Source Software;Benchmark","Cloning;Java;Linux;Kernel;HTML;Manuals;XML","Linux;parallel programming;public domain software","function clones;open source software;hybrid clone detection tool;NICAD;open source C systems;open source Java systems;Linux Kernel;Apache httpd;cloned code","","75","1","26","IEEE","24 Oct 2008","","","IEEE","IEEE Conferences"
"Pitfalls in Aspect Mining","K. Mens; A. Kellens; J. Krinke","Université Catholique Louvain, Belgium; Vrije Universiteit Brussel, Belgium; Fern Universität Hagen, Germany","2008 15th Working Conference on Reverse Engineering","24 Oct 2008","2008","","","113","122","The research domain of aspect mining studies the problem of (semi-)automatically identifying potential aspects and crosscutting concernsin a software system, to improve the system's comprehensibility or enable its migration to an aspect-oriented solution. Unfortunately,most proposed aspect mining techniques have not lived up to their expectations yet. In this paper we provide a list of problems thatmost aspect mining techniques suffer from and identify some of the root causes underlying these problems. Based upon this analysis, weconclude that many of the problems seem to be caused directly or indirectly by the use of inappropriate techniques, a lack of rigourand semantics on what is being mined for and how, and in how the results of the mining process are presented to the user.","2375-5369","978-0-7695-3429-9","10.1109/WCRE.2008.10","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4656400","aspect mining","Data mining;Cloning;Scalability;Software systems;Programming;Reverse engineering;Contracts","software engineering;software maintenance","aspect mining;software system;aspect-oriented solution","","12","","33","IEEE","24 Oct 2008","","","IEEE","IEEE Conferences"
"Retrieving relevant reports from a customer engagement repository","D. Thakkar; Z. M. Jiang; A. E. Hassan; G. Hamann; P. Flora","Software Analysis and Intelligence Lab (SAIL), Queen's University, Kingston, ON, Canada; Software Analysis and Intelligence Lab (SAIL), Queen's University, Kingston, ON, Canada; Software Analysis and Intelligence Lab (SAIL), Queen's University, Kingston, ON, Canada; Research in Motion Limited, Waterloo, ONT, Canada; Research in Motion Limited, Waterloo, ONT, Canada","2008 IEEE International Conference on Software Maintenance","24 Oct 2008","2008","","","117","126","Customers of modern enterprise applications commonly engage the vendor of the application for on-site troubleshooting and fine tuning of large deployments. The results of these engagements are documented in customer engagement reports. The reports contain valuable information about the observed symptoms, identified problems, attempted workarounds and the final solution. Such information is valuable in supporting analysts in future engagements. Engagement reports are stored in a customer engagement repository. Retrieving relevant reports from such a repository is usually ad-hoc and is based on using basic text search. We present a technique to retrieve relevant reports from an engagement repository. The technique takes as input an execution log for a particular deployment and retrieves relevant engagement reports. The technique identifies relevant reports by comparing execution logs attached to the report stored in the engagement repository. The technique returns two types of relevant reports: (1) reports for engagement with similar operational profiles to identify prior engagements with similar workloads and (2) reports for engagement with similar signature profiles to identify prior engagements with similar problems. Using our technique, support analysts can locate relevant engagement reports and use the knowledge in them to quickly resolve problems at hand. To demonstrate the feasibility of our technique, we present two case studies: one case study uses an industry standard open source application, the Dell DVD Store, while the other case study uses a large enterprise application. The results of our case study show that our technique performs well in identifying relevant reports with high precision and high recall.","1063-6773","978-1-4244-2613-3","10.1109/ICSM.2008.4658060","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4658060","","Distance measurement;Electronic mail;Law;Servers;Runtime;Security;DVD","business data processing;relevance feedback","relevant engagement reports retrieval;customer engagement repository;on-site troubleshooting;operational profiles;industry standard open source application;enterprise application","","3","2","17","IEEE","24 Oct 2008","","","IEEE","IEEE Conferences"
"Investigating the effects of framework design knowledge in example-based framework learning","Daqing Hou","Electrical and Computer Engineering, Clarkson University, Potsdam, NY, USA","2008 IEEE International Conference on Software Maintenance","24 Oct 2008","2008","","","37","46","Studying example applications is a common approach to learning software frameworks. However, to be truly effective in adapting example solutions with high confidence and accuracy, a developer needs to learn enough about the framework designs. The empirical study described in this paper investigates the effectiveness of a new approach to framework learning, where example-based learning is augmented with instruction on framework designs. Learning framework designs up-front from an instructor helps developers acquire the necessary design knowledge and avoid the time-consuming task of recovering such knowledge from code and other artifacts. The particular question of interest in this study is how characteristics of the framework designs influence project outcome. 11 student projects are analyzed using both qualitative and quantitative methods to characterize the overall reuse practice and to detect salient patterns that address the question. The contribution of this paper is a set of well-supported hypotheses that can be tested in future studies as well as their implications.","1063-6773","978-1-4244-2613-3","10.1109/ICSM.2008.4658052","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4658052","","Visualization;Software;Education;Tutorials;Graphical user interfaces;Documentation;Java","computer science education","framework design knowledge;example-based software framework learning;qualitative methods;quantitative methods;salient pattern detection","","2","","23","IEEE","24 Oct 2008","","","IEEE","IEEE Conferences"
"Maintaining software product lines — an industrial practice","M. Jiang; J. Zhang; H. Zhao; Y. Zhou","Motorola Laboratories, Motorola, Schaumburg, IL, USA; Motorola Laboratories, Motorola, Schaumburg, IL, USA; Mobile Devices, Motorola, Libertyville, IL, USA; University of Illinois, Urbana-Champaign, Urbana, IL, USA","2008 IEEE International Conference on Software Maintenance","24 Oct 2008","2008","","","444","447","Improved product quality and accelerated software development through systematic reuse of common software assets have been the key attractions behind software product lines. Magnitude of improvement in industrial practices has been reported in the literature. However, experiences with software product line also showed that it is a rather chall enging task to maintain software product lines and families over a long period of time. The time and resources needed to manage and maintain product lines increase and quality degrades as product lines evolve. This paper describes an industrial practice of software product line maintenance and evolution. The conventional software maintenance process is enhanced with data mining techniques to uncover lost reuse pattern and defects, maintain reuse, and reduce design erosion of product lines. Case studies with mobile phone product lines are described.","1063-6773","978-1-4244-2613-3","10.1109/ICSM.2008.4658100","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4658100","","Software;Software maintenance;Data mining;Maintenance engineering;Evolution (biology);Mobile handsets;Cloning","data mining;software maintenance;software reusability","software development;software product line maintenance;software evolution;data mining;software reusability","","6","","12","IEEE","24 Oct 2008","","","IEEE","IEEE Conferences"
"A methodology to assess the impact of source code flaws in changeability, and its application to clones","A. Lozano","Computing Department and Centre for Research in Computing, Open University, UK","2008 IEEE International Conference on Software Maintenance","24 Oct 2008","2008","","","424","427","Some characteristics of source code are perceived as harmful because they evidence that design principles were not applied in certain parts of the application. This work proposes a methodology that assesses the effect of so called source code flaws in changeability. Our methodology is based on measures and indicators of the effort of changing methods. The measures are calculated with information automatically extracted from source code repositories, being therefore objective. We analyze the effect of clones in methods using the methodology, and we show its potential for better understanding the effect of low level structure in changeability.","1063-6773","978-1-4244-2613-3","10.1109/ICSM.2008.4658095","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4658095","","","software engineering;source coding","source code flaws impact;changeability;clones;low level structure effect","","3","","19","IEEE","24 Oct 2008","","","IEEE","IEEE Conferences"
"Variation analysis of context-sharing identifiers with code clones","T. Kamiya",National Institute for Advanced Industrial Science and Technology,"2008 IEEE International Conference on Software Maintenance","24 Oct 2008","2008","","","464","465","This tool demo presents a tool prototype named VACI, which extracts relations between identifiers and their contexts in source code, and classifies (sets of) identifier names. The tool has two features; the first feature analyzes software for refactorings to enable users to check the adequateness of identifier names with context information. The second feature analyzes versions of code during maintenance activities to enable users to understand changes or trends in identifier names between versions.","1063-6773","978-1-4244-2613-3","10.1109/ICSM.2008.4658106","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4658106","","Cloning;Prototypes;Filtering;Maintenance engineering;Feature extraction;Software;Java","software maintenance;software performance evaluation","code clones;variation analysis of context-sharing identifiers;VACI;source code;software refactorings;software maintenance","","5","","4","IEEE","24 Oct 2008","","","IEEE","IEEE Conferences"
"Query-based filtering and graphical view generation for clone analysis","Yali Zhang; H. A. Basit; S. Jarzabek; D. Anh; M. Low","Department of Computer Science, School of Computing, National University of Singapore, Singapore; Department of Computer Science, School of Science and Engineering, Lahore University of Management Sciences, Pakistan; Department of Computer Science, School of Computing, National University of Singapore, Singapore; Department of Computer Science, School of Computing, National University of Singapore, Singapore; Department of Computer Science, School of Computing, National University of Singapore, Singapore","2008 IEEE International Conference on Software Maintenance","24 Oct 2008","2008","","","376","385","Code clones are similar program structures recurring in software systems. Clone detectors produce much information and a challenge is to identify useful clones depending on the goals of clone analysis. To do so, further abstraction, filtering and visualization of cloning information, with the involvement of a human expert, is required. In this paper, we describe a technique for filtering and visualization of cloning information generated by Clone Miner, a clone detection tool presented in our earlier work. Unique benefit and contribution of our approach is that a human expert can define a wide range of filters to extract abstract views of the cloning data using a clone-query system to suit specific needs of clone analysis. We then produce standardized graphical presentations of those views for various types of clone queries. We implemented the technique into an Eclipse plug-in called Clone Visualizer. Clone Visualizer works closely with Clone Miner which not only finds similar code fragments (simple clones) but also finds higher-level abstractions of the cloning information. Our method is the first attempt to address filtering and visualization of those higher level cloning abstractions. We illustrate application of our technique with examples from a clone analysis project with Clone Miner and Clone Visualizer.","1063-6773","978-1-4244-2613-3","10.1109/ICSM.2008.4658086","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4658086","","","data visualisation;query processing;software maintenance;software reliability;software reusability","query-based filtering;graphical view generation;code clone analysis;software systems;clone detectors;Clone Miner;clone detection tool;clone-query system;Eclipse plug-in;Clone Visualizer","","8","","23","IEEE","24 Oct 2008","","","IEEE","IEEE Conferences"
"Traceability for the maintenance of secure software","Y. Yu; J. Jurjens; J. Mylopoulos","Department of Computing, Open University, UK; Department of Computing, Open University, UK; Department of Computer Science, University of Toronto, Canada","2008 IEEE International Conference on Software Maintenance","24 Oct 2008","2008","","","297","306","Traceability links among different software engineering artifacts make explicit how a software system was implemented to accommodate its requirements. For secure and dependable software system development, one must ensure the linked entities are truly traceable to each other and the links are updated to reflect true traceability among changed entities. However, traditional traceability relationships link recovery techniques are not accurate enough. To address this problem, we propose a traceability technique based on refactoring, which is then continuously integrated with other software maintenance activities. Applying our traceability technique to the proven SSL protocol design, we found a significant vulnerability bug in its open-source implementation. The results also demonstrate the level of accuracy and change resilience of our technique that enable reuse of the traceability-related analysis on different implementations.","1063-6773","978-1-4244-2613-3","10.1109/ICSM.2008.4658078","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4658078","traceability;refactoring;maintenance;security","Security;Maintenance engineering;Unified modeling language;Protocols;Software;Specification languages;Software systems","program debugging;public domain software;software maintenance","maintenance traceability;software security;software engineering artifacts;traceability relationships link recovery techniques;SSL protocol design;vulnerability bug;open-source implementation","","9","2","25","IEEE","24 Oct 2008","","","IEEE","IEEE Conferences"
"Constructive architecture compliance checking — an experiment on support by live feedback","J. Knodel; D. Muthig; D. Rost","Fraunhofer Institute of Experimental Software Engineering (IESE), Kaiserslautern, Germany; Fraunhofer Institute of Experimental Software Engineering (IESE), Kaiserslautern, Germany; Fraunhofer Institute of Experimental Software Engineering (IESE), Kaiserslautern, Germany","2008 IEEE International Conference on Software Maintenance","24 Oct 2008","2008","","","287","296","This paper describes our lessons learned and experiences gained from turning an analytical reverse engineering technology - architecture compliance checking - into a constructive quality engineering technique. Constructive compliance checking constantly monitors the modifications made by developers. When a structural violation is detected, the particular developer receives live feedback allowing prompt removal of the violations and hence, training the developers on the architecture. An experiment with six component development teams gives evidence that this training pro-actively prevents architecture decay. The three teams supported by the live compliance checking inserted about 60% less structural violations into the architecture than did the three other development teams. Based on the results, we claim that constructive compliance checking is a promising application of reverse engineering technology to the software implementation phase.","1063-6773","978-1-4244-2613-3","10.1109/ICSM.2008.4658077","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4658077","architecture compliance checking;software architecture;product line engineering;PuLSE;SAVE;technology transfer","Computer architecture;Software systems;Servers;Software engineering;Monitoring;Testing;Materials","conformance testing;program diagnostics;reverse engineering;software architecture;software quality","architecture compliance checking;live feedback;analytical reverse engineering technology;quality engineering;component development teams;constructive compliance checking","","12","","24","IEEE","24 Oct 2008","","","IEEE","IEEE Conferences"
"Assessing the effect of clones on changeability","A. Lozano; M. Wermelinger","Computing Department and Centre for Research in Computing, Open University, UK; Computing Department and Centre for Research in Computing, Open University, UK","2008 IEEE International Conference on Software Maintenance","24 Oct 2008","2008","","","227","236","To prioritize software maintenance activities, it is important to identify which programming flaws impact most on an applicationpsilas evolution. Recent empirical studies on such a flaw, code clones, have focused on one of the arguments to consider clones harmful, namely, that related clones are not updated consistently. We believe that a wider notion is needed to assess the effect of cloning on evolution. This paper compares measures of the maintenance effort on methods with clones against those without. Statistical and graphical analysis suggests that having a clone may increase the maintenance effort of changing a method. The effort seems to increase depending on the percentage of the system affected whenever the methods that share the clone are modified. We also found that some methods seem to increase significantly their maintenance effort when a clone was present. However, the characteristics analyzed in these methods did not reveal any systematic relation between cloning and such maintenance effort increase.","1063-6773","978-1-4244-2613-3","10.1109/ICSM.2008.4658071","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4658071","","Cloning;Maintenance engineering;Evolution (biology);Algorithm design and analysis;Software;Programming;Computer bugs","graph theory;software maintenance;statistical analysis","changeability;software maintenance;programming flaws;code clones;statistical analysis;graphical analysis","","82","","22","IEEE","24 Oct 2008","","","IEEE","IEEE Conferences"
"The road ahead for Mining Software Repositories","A. E. Hassan","Software Analysis and Intelligence Lab (SAIL), School of Computing, Queen's University, Canada","2008 Frontiers of Software Maintenance","24 Oct 2008","2008","","","48","57","Source control repositories, bug repositories, archived communications, deployment logs, and code repositories are examples of software repositories that are commonly available for most software projects. The mining software repositories (MSR) field analyzes and cross-links the rich data available in these repositories to uncover interesting and actionable information about software systems. By transforming these repositories from static record-keeping ones into active repositories, we can guide decision processes in modern software projects. For example, data in source control repositories, traditionally used to archive code, could be linked with data in bug repositories to help practitioners propagate complex changes and to warn them about risky code based on prior changes and bugs. In this paper, we present a brief history of the MSR field and discuss several recent achievements and results of using MSR techniques to support software research and practice. We then discuss the various opportunities and challenges that lie in the road ahead for this important and emerging field.","","978-1-4244-2654-6","10.1109/FOSM.2008.4659248","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4659248","","Software;Data mining;Computer bugs;Software systems;Software engineering;Complexity theory;History","data mining;decision making;program debugging;project management;software engineering","source control repositories;bug repositories;archived communications;deployment logs;code repositories;mining software repositories field;decision processes;modern software projects","","150","4","68","IEEE","24 Oct 2008","","","IEEE","IEEE Conferences"
"Dealing with crosscutting concerns in existing software","L. Moonen","Simula Research Laboratory, Norway","2008 Frontiers of Software Maintenance","24 Oct 2008","2008","","","68","77","This paper provides a roadmap for dealing with crosscutting concerns while trying to understand, maintain, and evolve existing software systems. We describe an integrated, systematic, approach that helps a software engineer with identifying, documenting and migrating crosscutting concerns in the source code of a software system, and discuss the integration considerations. We conclude with a number of lessons learned and directions for future research.","","978-1-4244-2654-6","10.1109/FOSM.2008.4659250","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4659250","","Software;Data mining;Software systems;Observers;Scattering;Evolution (biology);Cloning","software maintenance","crosscutting;software systems;software engineering;software maintenance","","2","","53","IEEE","24 Oct 2008","","","IEEE","IEEE Conferences"
"Frontiers of reverse engineering: A conceptual model","G. Canfora; M. Di Penta","Rcost-University of Sannio, Benevento, Italy; Rcost-University of Sannio, Benevento, Italy","2008 Frontiers of Software Maintenance","24 Oct 2008","2008","","","38","47","Software reverse engineering is a crucial task to reconstruct high-level views of a software system - with the purpose of understanding and/or maintaining it - when the only reliable source of information is the source code, or even the system binaries. This paper discusses key reverse engineering concepts through a UML conceptual model. Specifically, the model is composed of a set of UML class diagrams describing relationships existing among reverse engineering processes, tools, artifacts, and stakeholders.","","978-1-4244-2654-6","10.1109/FOSM.2008.4659247","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4659247","","Software;Reverse engineering;Data mining;Unified modeling language;Analytical models;Computer architecture;Documentation","reverse engineering;software engineering;Unified Modeling Language","software reverse engineering;software system;source code;UML class diagrams","","6","","59","IEEE","24 Oct 2008","","","IEEE","IEEE Conferences"
"Frontiers of software clone management","R. Koschke","Universitat Bremen, Bremen, Bremen, DE","2008 Frontiers of Software Maintenance","24 Oct 2008","2008","","","119","128","Ad-hoc reuse through copy-and-paste occurs frequently in practice affecting the evolvability of software. This paper summarizes the state of the art in software clone management (detection, tracking, presentation, assessing, removal, changing) and the empirical knowledge we have gained so far. In the course of the summary, the paper identifies further research potential.","","978-1-4244-2654-6","10.1109/FOSM.2008.4659255","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4659255","","Cloning;Software;Redundancy;Evolution (biology);Computer bugs;Kernel;Linux","software management","software clone management;ad-hoc reuse;software evolvability","","32","","99","IEEE","24 Oct 2008","","","IEEE","IEEE Conferences"
"Using Semantic clustering to enhance the navigation structure of Web sites","G. Scanniello; D. Distante; M. Risi","Department of Mathematics and Computer Science, University of Basilicata, Italy; Faculty of Economics, Tel.M.A. University, Italy; Department of Mathematics and Computer Science, University of Salerno, Italy","2008 10th International Symposium on Web Site Evolution","21 Oct 2008","2008","","","55","64","This paper presents an automatic approach based on semantic clustering to enhance the navigation structure of Web sites. The approach extends the navigation structure of a Web site by introducing a set of links that enable the navigation from each page of the site to other pages showing similar or related content. The approach uses Latent Semantic Indexing to compute a dissimilarity measure between the pages of the site and a Graph-Theoretic clustering algorithm to group pages having similar or related content. The additional links connecting each page of the site to the others within the same cluster are dynamically injected into each page by using AJAX code. A prototype of a supporting tool and the results from a case study conducted to assess the feasibility of the approach are also presented.","1550-4441","978-1-4244-2790-1","10.1109/WSE.2008.4655396","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4655396","clone detection;clustering;information retrieval;reverse engineering","","graph theory;indexing;Java;pattern clustering;Web sites;XML","semantic clustering;navigation structure;Web sites;latent semantic indexing;graph-theoretic clustering;AJAX code","","6","","39","IEEE","21 Oct 2008","","","IEEE","IEEE Conferences"
"On clustering based aspect mining","G. S. Cojocar; G. Czibula","Department of Computer Science, Babes Bolyai University, Cluj-Napoca, Romania; Department of Computer Science, Babes Bolyai University, Cluj-Napoca, Romania","2008 4th International Conference on Intelligent Computer Communication and Processing","10 Oct 2008","2008","","","129","136","Clustering is a division of data into groups of similar objects. Aspect mining is a process that tries to identify crosscutting concerns in existing software systems. The goal is to refactor the existing systems to use aspect oriented programming in order to make them easier to maintain and to evolve. The aim of this paper is to comparatively analyze and evaluate the results obtained by different clustering algorithms in aspect mining. The evaluation is performed on an open source case study using four measures.","","978-1-4244-2673-7","10.1109/ICCP.2008.4648364","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4648364","","Clustering algorithms;Distance measurement;Software systems;Partitioning algorithms;Heuristic algorithms;Data mining;Algorithm design and analysis","data mining;pattern clustering","data clustering;aspect mining;software systems;aspect oriented programming","","8","","36","IEEE","10 Oct 2008","","","IEEE","IEEE Conferences"
"Cleman: Comprehensive Clone Group Evolution Management","T. T. Nguyen; H. A. Nguyen; N. H. Pham; J. M. Al-Kofahi; T. N. Nguyen","Electrical and Computer Engineering Department, Iowa State University, USA; Electrical and Computer Engineering Department, Iowa State University, USA; Electrical and Computer Engineering Department, Iowa State University, USA; Electrical and Computer Engineering Department, Iowa State University, USA; Electrical and Computer Engineering Department, Iowa State University, USA","2008 23rd IEEE/ACM International Conference on Automated Software Engineering","7 Oct 2008","2008","","","451","454","Recent research results have shown more benefits of the management of code clones, rather than detecting and removing them. However, existing management approaches for code clone group evolution are still ad hoc, unsatisfactory, and limited. In this paper, we introduce a novel method for comprehensive code clone group management in evolving software. The core of our method is Cleman, an algorithmic framework that allows for a systematic construction of efficient and accurate clone group management tools. Clone group management is rigorously formulated by a formal model, which provides the foundation for Cleman framework. We use Cleman framework to build a clone group management tool that is able to detect high-quality clone groups and efficiently manage them when the software evolves. We also conduct an empirical evaluation on real-world systems to show the flexibility of Cleman framework and the efficiency, completeness, and incremental updatability of our tool.","1938-4300","978-1-4244-2187-9","10.1109/ASE.2008.71","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4639364","","Cloning;Evolution (biology);Software;Distance measurement;Software systems;Manuals;Feature extraction","software engineering","code clone group evolution management;comprehensive code clone group management;evolving software;algorithmic framework;formal model;Cleman framework;software evolution","","8","","13","IEEE","7 Oct 2008","","","IEEE","IEEE Conferences"
"Automated Aspect Recommendation through Clustering-Based Fan-in Analysis","D. Zhang; Y. Guo; X. Chen","Key laboratory of High Confidence Software Technologies (Ministry of Education) Institute of Software, School of Electronics Engineering and Computer Science, Peking University, China; Key laboratory of High Confidence Software Technologies (Ministry of Education) Institute of Software, School of Electronics Engineering and Computer Science, Peking University, China; Key laboratory of High Confidence Software Technologies (Ministry of Education) Institute of Software, School of Electronics Engineering and Computer Science, Peking University, China","2008 23rd IEEE/ACM International Conference on Automated Software Engineering","7 Oct 2008","2008","","","278","287","Identifying code implementing a crosscutting concern (CCC) automatically can benefit the maintainability and evolvability of the application. Although many approaches have been proposed to identify potential aspects, a lot of manual work is typically required before these candidates can be converted into refactorable aspects. In this paper, we propose a new aspect mining approach, called clustering-based fan-in analysis (CBFA), to recommend aspect candidates in the form of method clusters, instead of single methods. CBFA uses a new lexical based clustering approach to identify method clusters and rank the clusters using a new ranking metric called cluster fan- in. Experiments on Linux and JHotDraw show that CBFA can provide accurate recommendations while improving aspect mining coverage significantly compared to other state-of-the-art mining approaches.","1938-4300","978-1-4244-2187-9","10.1109/ASE.2008.38","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4639331","","Linux;Java;Kernel;Clustering algorithms;Synchronization;Data mining;Manuals","object-oriented programming;program diagnostics;software metrics","automated aspect recommendation;clustering-based fan-in analysis;crosscutting concern;refactorable aspects;aspect mining;method clusters;lexical based clustering;ranking metric","","16","","21","IEEE","7 Oct 2008","","","IEEE","IEEE Conferences"
"Generic Patch Inference","J. Andersen; J. L. Lawall","DIKU, University of Copenhagen, Copenhagen, Denmark; DIKU, University of Copenhagen, Copenhagen, Denmark","2008 23rd IEEE/ACM International Conference on Automated Software Engineering","7 Oct 2008","2008","","","337","346","A key issue in maintaining Linux device drivers is the need to update drivers in response to evolutions in Linux internal libraries. Currently, there is little tool support for performing and documenting such changes. In this paper we present a tool, spdiff, that identifies common changes made in a set of pairs of files and their updated versions, and extracts a generic patch performing those changes. Library developers can use our tool to extract a generic patch based on the result of manually updating a few typical driver files, and then apply this generic patch to other drivers. Driver developers can use it to extract an abstract representation of the set of changes that others have made. Our experiments on recent changes in Linux show that the inferred generic patches are more concise than the corresponding patches found in commits to the Linux source tree while being safe with respect to the changes performed in the provided pairs of driver files.","1938-4300","978-1-4244-2187-9","10.1109/ASE.2008.44","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4639337","","Evolution (biology);Linux;Safety;Driver circuits;Libraries;Pattern matching;Compounds","device drivers;Linux;program diagnostics;software libraries;software maintenance;software tools","Linux device driver maintenance;Linux internal library;spdiff tool;generic patch inference;abstract representation","","23","6","7","IEEE","7 Oct 2008","","","IEEE","IEEE Conferences"
"Is Cloned Code More Stable than Non-cloned Code?","J. Krinke","Fern Universiät Hagen, Hagen, Germany","2008 Eighth IEEE International Working Conference on Source Code Analysis and Manipulation","3 Oct 2008","2008","","","57","66","This paper presents a study on the stability of cloned code. The results from an analysis of 200 weeks of evolution of five software system show that the stability as measured by changes to the system is dominated by the deletion of code clones. It can also be observed that additions to a systems are more often additions to non-cloned code than additions to cloned code. If the dominating factor of deletions is eliminated, it can generally be concluded that cloned code is more stable than non-cloned code.","","978-0-7695-3353-7","10.1109/SCAM.2008.14","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4637539","","Cloning;Evolution (biology);Java;Software systems;Software;Stability analysis;History","software engineering","cloned code stability;non cloned code;software system;software development","","84","","23","IEEE","3 Oct 2008","","","IEEE","IEEE Conferences"
"User-centered, evolutionary search in conceptual software design","C. L. Simons; I. C. Parmee","Advanced Design and Decision making Laboratory, University of West of England, UK; Advanced Design and Decision making Laboratory, University of West of England, UK","2008 IEEE Congress on Evolutionary Computation (IEEE World Congress on Computational Intelligence)","23 Sep 2008","2008","","","869","876","Although much evidence exists to suggest that conceptual software engineering design is a difficult task for software engineers to perform, current computationally intelligent tool support for software engineers is limited. While search-based approaches involving module clustering and refactoring have been proposed and show promise, such approaches are downstream in terms of the software development lifecycle - the designer must manually produce a design before search-based clustering and refactoring can take place. Interactive, user-centered search-based approaches, on the other hand, support the designer at the beginning of, and during, conceptual software design, and are investigated in this paper by means of a case study. Results show that interactive evolutionary search, supported by software agents, appears highly promising. As an open system, search is steered jointly by designer preferences and software agents. Directly traceable to the design problem domain, a mass of useful and interesting conceptual class designs are arrived at which may be visualized by the designer with quantitative measures of structural integrity such as design coupling and class cohesion. The conceptual class designs are found to be of equivalent or better coupling and cohesion when compared to a manual conceptual design of the case study, and by exploiting concurrent execution, the performance of the software agents is highly favorable.","1941-0026","978-1-4244-1822-0","10.1109/CEC.2008.4630898","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4630898","","Evolutionary computation","interactive systems;open systems;software agents;software architecture;user centred design","conceptual software design;software engineering design;interactive user-centered search;interactive evolutionary search;software agent;open system;conceptual class design","","10","","32","IEEE","23 Sep 2008","","","IEEE","IEEE Conferences"
"Jump-Starting Software Product Lines with Clone Detection","A. M. Dalgarno","Software Acumen Ltd., Cambridge","2008 12th International Software Product Line Conference","19 Sep 2008","2008","","","351","351","Clone detection, the systematic identification ofidentical or near-identical code fragments, is apowerful tool for launching a software product linefrom an existing code base and for maintaining asoftware product line once it is in operation.This session illustrates the concept of clonedetection and places it in a product line context.","","978-0-7695-3303-2","10.1109/SPLC.2008.55","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4626868","clone detection;software product lines","Cloning;Software;Organizations;Conferences;Maintenance engineering;Evolution (biology);Reverse engineering","product development;software reusability","software product lines;clone detection;near-identical code fragments","","1","","4","IEEE","19 Sep 2008","","","IEEE","IEEE Conferences"
"Model-Based Design of Product Line Components in the Automotive Domain","K. Yoshimura; T. Forster; D. Muthig; D. Pech","Fraunhofer Institute of Experimental Software Engineering (IESE), Kaiserslautern, Germany; Fraunhofer Institute of Experimental Software Engineering (IESE), Kaiserslautern, Germany; Hitachi Research Laboratory, Hitachi and Limited, Ibaraki, Japan; Fraunhofer Institute of Experimental Software Engineering (IESE), Kaiserslautern, Germany","2008 12th International Software Product Line Conference","19 Sep 2008","2008","","","170","179","For installing product line engineering in practice, strategies are needed that are composed of smaller steps where, on the one hand, each of them represents a well-defined move towards the ultimate goal of a well-functioning product line organization but, on the other hand, does not bear unmanageable risks. Hence product line approaches like Fraunhofer PuLSETM must define such steps, as well as provide a framework that supports their systematic combination into a tailored organizational strategy for installing product line engineering. This paper presents one step of such a strategy that focuses on the design activity. A well-known model-based design approach from the automotive domain is extended by the concept of variability and decision modeling. The resulting method has been prototyped and validated in a controlled environment. The measured results show that the method can be easily applied and leads to an effort distribution analogously to the typical product line curve.","","978-0-7695-3303-2","10.1109/SPLC.2008.20","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4626851","variability management;model driven development;product line engineering;decision model;component engineering","Unified modeling language;Automotive engineering;Mathematical model;Organizations;Engines;Software;Adaptation model","automotive engineering;CAD;production engineering computing","model-based design;automotive domains;product line engineering;model-based design approach;decision modeling;product line curve","","2","","13","IEEE","19 Sep 2008","","","IEEE","IEEE Conferences"
"Applying aspect oriented service control in IMS network","Jia Jia Wen; Li Na Ren; Lee Longmore; Qi Yu","IBM China Research Laboratory, China; IBM China Research Laboratory, China; IBM S and D Communication Sector; IBM China Research Laboratory, China","NOMS 2008 - 2008 IEEE Network Operations and Management Symposium","26 Aug 2008","2008","","","742","746","Service delivery is vital for the success of IMS network in telecom. Current approaches focus on combining existing services into a new composite service. However, there are further requirements for enabling telecom operator to dynamically personalize, manage and enhance user services at runtime outside of the application logic itself. We observe the need and present the SCL (Service Control Layer), an adaptive middleware between the service and network plane in IMS. By using aspect oriented technology, the SCL provide operators with the requisite fine-grained control over service delivery","2374-9709","978-1-4244-2065-0","10.1109/NOMS.2008.4575203","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4575203","Service Management;Service Control;Aspect Oriented;IMS","Telecommunication control;Telecommunication services;Runtime;Logic;Next generation networking;Programmable control;Adaptive control;Peer to peer computing;Business;Communication system control","IP networks;middleware;multimedia communication;object-oriented programming;telecommunication control","aspect oriented service control;IMS network;service delivery;telecom operator;service control layer;SCL adaptive middleware;aspect oriented programming","","1","","19","IEEE","26 Aug 2008","","","IEEE","IEEE Conferences"
"Abstracting Execution Logs to Execution Events for Enterprise Applications (Short Paper)","Z. M. Jiang; A. E. Hassan; P. Flora; G. Hamann","Queen's University, Canada; Queen's University, Canada; Research in Motion Limited, Canada; Research in Motion Limited, Canada","2008 The Eighth International Conference on Quality Software","19 Aug 2008","2008","","","181","186","Monitoring the execution of large enterprise systems is needed to ensure that such complex systems are performing as expected. However, common techniques for monitoring, such as code instrumentation and profiling have significant performance overhead, and require access to the source code and to system experts. In this paper, we propose using execution logs to monitor the execution of applications. Unfortunately, execution logs are not designed for monitoring purposes. Each occurrence of an execution event results in a different log line, since a log line contains dynamic information which varies for each occurrence of the event. We propose an approach which abstracts log lines to a set of execution events. Our approach can handle log lines without having strict requirements on the format of a log line. Through a case study on a large enterprise application, we demonstrate that our approach performs well when abstracting execution logs for large enterprise applications. We compare our approach against the SLCT tool which is commonly used to find line patterns in logs.","2332-662X","978-0-7695-3312-4","10.1109/QSIC.2008.50","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4601543","Log Abstraction;Dynamic Analysis;Monitoring;Clone","Monitoring;Instruments;Software systems;Runtime;Cloning;Software;Encoding","business data processing;system monitoring","execution logs;execution events;enterprise application;large enterprise systems;complex systems;code instrumentation;software profiling","","28","1","28","IEEE","19 Aug 2008","","","IEEE","IEEE Conferences"
"An Agile Classroom Experience: Teaching TDD and Refactoring","B. Carlson","Des Moines Area Community College, West Des Moines, IA, USA","Agile 2008 Conference","15 Aug 2008","2008","","","465","469","Teaching the agile practices of test-driven development and refactoring to entry level students can be a challenge. This paper outlines an approach to doing so with simplicity at its core. It has been an effective way to communicate not only the mechanics of the practices, but also the reasons behind why the practices are important to a professional software developer.","","978-0-7695-3321-6","10.1109/Agile.2008.39","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4599523","agile;tdd;refactoring;education","Java;Libraries;Books;Manuals;Servers;Software;Testing","computer science education;software engineering","agile classroom experience;TDD;test-driven development;entry level students;professional software developer","","3","","","IEEE","15 Aug 2008","","","IEEE","IEEE Conferences"
"Visually Summarising Software Change","T. Arbuckle","University of Limerick, Limerick, Ireland","2008 12th International Conference Information Visualisation","25 Jul 2008","2008","","","559","568","Many authors have noted the problem of excessive information when attempting to create useful visualisations of software. The problem of visualising change over multiple versions of software is more complex still. We present a means of visualising changes in software, founded on information-theoretic arguments, that easily and automatically summarises difference between software versions with respect to their code, their structure or their behaviour. Further, we show, by creating visualisations in experiments on real-world data, that the method is of utility to practitioners and has implications beyond the field of software visualisation.","2375-0138","978-0-7695-3268-4","10.1109/IV.2008.58","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4578005","software evolution;visualisation of change;Kolmogorov complexity;similarity metric;CompLearn","","program visualisation;software metrics","software change visually summarising;information-theoretic arguments;software versions;software visualisation","","6","","47","IEEE","25 Jul 2008","","","IEEE","IEEE Conferences"
"Crawling AJAX by Inferring User Interface State Changes","A. Mesbah; E. Bozdag; A. van Deursen","Delft University of Technology, The Netherlands; Delft University of Technology, The Netherlands; Delft Univ. of Technology & CWI, The Netherlands","2008 Eighth International Conference on Web Engineering","25 Jul 2008","2008","","","122","134","Ajax is a very promising approach for improving rich interactivity and responsiveness of web applications. At the same time, Ajax techniques shatter the metaphor of a web ""page"" upon which general search crawlers are based. This paper describes a novel technique for crawling Ajax applications through dynamic analysis and reconstruction of user interface state changes. Our method dynamically infers a state-flow graph modeling the various navigation paths and states within an Ajax application. This reconstructed model can be used to generate linked static pages. These pages could be used to expose Ajax sites to general search engines. Moreover, we believe that the crawling techniques that are part of our solution have other applications, such as within general search engines, accessibility improvements, or in automatically exercising all user interface elements and conducting state-based testing of Ajax applications. We present our open source tool called Crawljax which implements the concepts discussed in this paper. Additionally, we report a case study in which we apply our approach to a number of representative Ajax applications and elaborate on the obtained results.","","978-0-7695-3261-5","10.1109/ICWE.2008.24","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4577876","ajax;crawler;search engine","User interfaces;Crawlers;Search engines;Browsers;Navigation;Engines;Tools","interactive programming;Internet;Java;user interfaces;XML","AJAX;user interface;interactivity;World Wide Web;graph modeling;JavaScript;XML","","96","19","24","IEEE","25 Jul 2008","","","IEEE","IEEE Conferences"
"A General Evaluation Criteria for Web Applications Maintainability Models","E. Ghosheh; S. Black; J. Qaddour","AT and T, Saint Louis, MO, USA; Department of Information and Software Systems, Harrow School of Computer Science, University of Westminster, London, UK; School of Information Technology, Illinois State University, Normal, IL, USA","2008 IEEE Region 5 Conference","15 Jul 2008","2008","","","1","6","Many World Wide Web applications incorporate important business assets and offer a convenient way for businesses to promote their services through the Internet. Many of these Web applications evolved from simple HTML pages to complex applications which are difficult to maintain. Several maintainability models have been proposed for measuring the maintainability of Web applications. It is difficult to choose between the different maintainability models since no common criteria exists for evaluating them. In this paper, we introduce a general evaluation criteria for maintainability models (ECMM) which is applied on a sample Web application.","","978-1-4244-2076-6","10.1109/TPSD.2008.4562738","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4562738","Maintainability models;web applications;hierarchical multidimensional assessment","Application software;Software maintenance;Software systems;Costs;Web sites;Web and internet services;HTML;Databases;Scattering;Computer science","Internet;software maintenance;software performance evaluation","general evaluation criteria;Web applications maintainability models;World Wide Web;HTML","","3","","24","IEEE","15 Jul 2008","","","IEEE","IEEE Conferences"
"Aspect Mining in Procedural Object Oriented Code","M. U. Bhatti; S. Ducasse; A. Rashid","CRI, Universite de Paris 1 Sorbonne, France; INRIA, Lille Nord Europe, France; Computing Department, Lancaster University, UK","2008 16th IEEE International Conference on Program Comprehension","2 Jul 2008","2008","","","230","235","Although object-oriented programming promotes reusable and well factored entity decomposition, industrial software often shows traces of lack of object-oriented design and procedural thinking. This results in domain entity scattered and tangled code. This is often true in data intensive applications. Aspect mining techniques search for various patterns of scattered and tangled code pertaining to crosscutting concerns. However, in the presence of non-abstracted domain logic, the crosscutting concerns identified are inaccurately related to aspects since lack of 00 abstraction introduces false positives. This paper identifies the difficulty of identifying crosscutting concerns in systems lacking elementary object-oriented structure. It presents an approach classifying various crosscutting concerns. We report our experience on an industrial software system.","1092-8138","978-0-7695-3176-2","10.1109/ICPC.2008.45","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4556136","Reverse Engineering;Aspect Oriented Programming;Aspect Mining;Crosscutting Concerns","Scattering;Computer industry;Application software;Software systems;Mining industry;Logic;Blood;System testing;Performance analysis;Quality control","data mining;design;object-oriented programming;software reusability","Aspect mining;procedural object-oriented code;entity decomposition reusability;industrial software;object-oriented design;nonabstracted domain logic;crosscutting concerns","","2","","13","IEEE","2 Jul 2008","","","IEEE","IEEE Conferences"
"Scenario-Based Comparison of Clone Detection Techniques","C. K. Roy; J. R. Cordy","School of Computing, Queen's University, Kingston, ONT, Canada; School of Computing, Queen's University, Kingston, ONT, Canada","2008 16th IEEE International Conference on Program Comprehension","2 Jul 2008","2008","","","153","162","Over the last decade many techniques for software clone detection have been proposed. In this paper, we provide a comprehensive survey of the capabilities of currently available clone detection techniques. We begin with an overall survey based on criteria that capture the main features of detection techniques. We then propose a set of hypothetical editing scenarios for different clone types, and evaluate the techniques based on their estimated potential to accurately detect clones that may be created by those scenarios.","1092-8138","978-0-7695-3176-2","10.1109/ICPC.2008.42","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4556127","Clone Detection Techniques;Editing Taxonomy;Scenario-Based Evaluation","Cloning;Computer vision;Programming;Software systems;Detectors;Open source software;Java;Art;Computational complexity;Writing","software maintenance;software reusability","clone detection techniques;software clone detection;hypothetical editing scenarios","","38","","47","IEEE","2 Jul 2008","","","IEEE","IEEE Conferences"
"NICAD: Accurate Detection of Near-Miss Intentional Clones Using Flexible Pretty-Printing and Code Normalization","C. K. Roy; J. R. Cordy","School of Computing, Queen's University, Kingston, ONT, Canada; School of Computing, Queen's University, Kingston, ONT, Canada","2008 16th IEEE International Conference on Program Comprehension","2 Jul 2008","2008","","","172","181","This paper examines the effectiveness of a new language- specific parser-based but lightweight clone detection approach. Exploiting a novel application of a source transformation system, the method accurately finds near-miss clones using an efficient text line comparison technique. The transformation system assists the method in three ways. First, using agile parsing it provides user-specified flexible pretty- printing to remove noise, standardize formatting and break program statements into parts such that potential changes can be detected as simple linewise text differences. Second, it provides efficient flexible extraction of potential clones to be compared using island grammars and agile parsing to select granularities and enumerate potential clones. Third, using transformation rules it provides flexible code normalization to allow for local editing differences between similar code segments and filtering out of uninteresting parts of potential clones. In this paper we introduce the theory and practice of the framework and demonstrate its use in finding function clones in C code. Early experiments indicate that the method is capable of finding near-miss clones with high precision and recall, and with reasonable performance.","1092-8138","978-0-7695-3176-2","10.1109/ICPC.2008.41","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4556129","Clone Detection;Near-Miss Intentional Clones;Flexible Pretty-Printing;Flexible Code Normalization;Flexible Code Filtering","Cloning;Filtering;Software systems;Printing;Programming profession","grammars;program compilers;specification languages;text analysis","NICAD;near-miss intentional clones;pretty-printing;code normalization;language-specific parser;lightweight clone detection approach;source transformation system;near-miss clones;text line comparison technique;agile parsing;island grammars","","271","1","33","IEEE","2 Jul 2008","","","IEEE","IEEE Conferences"
"Software Implemented Detection and Recovery of Soft Errors in a Brake-by-Wire System","D. Skarin; J. Karlsson","Department of Computer Science and Engineering, Chalmers University of Technology, Gothenburg, Sweden; Department of Computer Science and Engineering, Chalmers University of Technology, Gothenburg, Sweden","2008 Seventh European Dependable Computing Conference","2 Jul 2008","2008","","","145","154","This paper presents an experimental study of the impact of soft errors in a prototype brake-by-wire system. To emulate the effects of soft errors, we injected single bit-flips into ""live"" data in the architected state of a MPC565 microcontroller. We first describe the results of an error injection campaign with a brake-by-wire controller in which hardware exceptions are the only means for error detection. In this campaign, 30% of the injected errors passed undetected and caused the controller to produce erroneous outputs to the brake actuator. Of these, 15% resulted in critical failures. An analysis showed that a majority of the critical failures were caused by errors affecting either the stack pointer or the controller's integrator. Hence, we designed two software implemented error handling mechanisms that protect the stack pointer and the integrator state, inducing an overhead of 4% in data and 8% in speed. A second error injection campaign showed that these mechanisms reduced the proportion of critical failures one order of magnitude, from 4.6% to 0.4% of the injected soft errors.","","978-0-7695-3138-0","10.1109/EDCC-7.2008.24","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4555999","","Error correction;Computer errors;Hardware;Circuit faults;Microcontrollers;Control systems;Failure analysis;Driver circuits;Automotive engineering;Safety","braking;control engineering computing;microcontrollers","software implemented soft error detection;soft errors recovery;brake-by-wire system;single bit-flips;MPC565 microcontroller;hardware exceptions;error detection;error injection campaign;software implemented soft error recovery","","27","","24","IEEE","2 Jul 2008","","","IEEE","IEEE Conferences"
"Multidimensional Correlation of Software Source Code","R. Zeidman",Software Analysis and Forensic Engineering Corporation,"2008 Third International Workshop on Systematic Approaches to Digital Forensic Engineering","20 Jun 2008","2008","","","144","156","Standard ways of calculating the similarity of different computer programs are needed in computer science. Such measurements can be useful in many different areas such as clone detection, refactoring, compiler optimization, and run-time optimization. Such standards are particularly important for uncovering plagiarism, trade secret theft, copyright infringement, and patent infringement. Other uses include locating open source code within a proprietary program and determining the authors of different programs. In a previous paper (R. Zeidman, 2006) I introduced the concept of source code correlation, presented a theoretical basis for such a measure, and described a program, CodeMatchreg, that compares software source code and calculates correlation. That paper compared the described method of source code correlation against existing methods of comparing source code and found it to be significantly superior. This paper refines that definition of source code correlation and presents a new, more robust, definition of multidimensional source code correlation.","","978-0-7695-3171-7","10.1109/SADFE.2008.9","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4545376","Clone Detection;Copyright;Correlation;Infringement;Intellectual Property;Patent;Refactoring;Source Code;Plagiarism;Theft;Trade Secret","Multidimensional systems;Optimizing compilers;Computer science;Area measurement;Cloning;Runtime;Plagiarism;Software measurement;Open source software;Robustness","computer science;copyright;patents;programming;security of data;software engineering;source coding","multidimensional correlation;software source code;computer programs;computer science;plagiarism;trade secret theft;copyright infringement;patent infringement;CodeMatch","","5","1","20","IEEE","20 Jun 2008","","","IEEE","IEEE Conferences"
"Static Deadlock Detection for the SHIM Concurrent Language","N. Vasudevan; S. A. Edwards","Department of Computer Science, Columbia University, NY, USA; Department of Computer Science, Columbia University, NY, USA","2008 6th ACM/IEEE International Conference on Formal Methods and Models for Co-Design","20 Jun 2008","2008","","","49","58","Concurrent programming languages are becoming mandatory with the advent of multi-core processors. Two major concerns in any concurrent program are data races and deadlocks. Each are potentially subtle bugs that can be caused by non-deterministic scheduling choices in most concurrent formalisms. As an alternative, the SHIM concurrent language guarantees the absence of data races by eschewing shared memory, but a SHIM program may still deadlock if a program violates a communication protocol. We present a model-checking-based static deadlock detection technique for the SHIM language. Although SHIM is asynchronous, its semantics allow us to model it synchronously without losing precision, greatly reducing the state space that must be explored. This plus the obvious division between control and data in SHIM programs makes it easy to construct concise abstractions. Experimentally, we find our procedure runs in only a few seconds for modest-sized programs, making it practical to use as part of a compilation chain.","","978-1-4244-2417-7","10.1109/MEMCOD.2008.4547686","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4547686","Concurrency;SHIM;Static Analysis;Deadlock;NuSMV","System recovery;Concurrent computing;Computer science;State-space methods;Interleaved codes;Explosions;Java;Computer languages;Multicore processing;Computer bugs","concurrency control;processor scheduling;programming languages","static deadlock detection;SHIM concurrent programming language;multicore processors;nondeterministic scheduling;communication protocol;model-checking-based static deadlock detection","","8","","20","IEEE","20 Jun 2008","","","IEEE","IEEE Conferences"
"Mutation Testing for Aspect-Oriented Programs","F. C. Ferrari; J. C. Maldonado; A. Rashid","Computing Systems Department, University of São Paulo, Sao Paulo, Brazil; Computing Systems Department, University of São Paulo, Sao Paulo, Brazil; Computing Department, Lancaster University, Lancaster, UK","2008 1st International Conference on Software Testing, Verification, and Validation","6 Jun 2008","2008","","","52","61","Mutation testing has been shown to be one of the strongest testing criteria for the evaluation of both programs and test suites. Comprehensive sets of mutants require strong test sets to achieve acceptable testing coverage. Moreover, mutation operators are valuable for the evaluation of other testing approaches. Although its importance has been highlighted for aspect-oriented (AO) programs, there is still a need for a suitable set of mutation operators for AO languages. The quality of the mutation testing itself relies on the quality of such operators. This paper presents the design of a set of mutation operators for AspectJ-based programs. These operators model instances of fault types identified in an extensive survey. The fault types and respective operators are grouped according to the related language features. We also discuss the generalisation of the fault types to AO approaches other than AspectJ and the coverage that may be achieved with the application of the proposed operators. In addition, a cost analysis based on two case studies involving real-world applications has provided us feedback on the most expensive operators, which will support the definition of further testing strategies.","2159-4848","978-0-7695-3127-4","10.1109/ICST.2008.37","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4539532","Mutation testing;Aspect-Oriented testing;mutation operators;AO fault types","Genetic mutations;Software testing;Fault diagnosis;Costs;System testing;Application software;Software quality;Feedback;Proposals","object-oriented programming;program testing","mutation testing;aspect-oriented programs;mutation operators;fault types","","44","","35","IEEE","6 Jun 2008","","","IEEE","IEEE Conferences"
"Background Calibration of Pipelined ADCs Via Decision Boundary Gap Estimation","L. Brooks; H. -S. Lee","Department of Electrical Engineering and Computer Science, Massachusetts Institute of Technology, Cambridge, MA, USA; Department of Electrical Engineering and Computer Science, Massachusetts Institute of Technology, Cambridge, MA, USA","IEEE Transactions on Circuits and Systems I: Regular Papers","21 Nov 2008","2008","55","10","2969","2979","A method of indirect background digital calibration of the dominant static nonlinearities in pipelined analog-to-digital converters (ADC) is presented. The method, called decision boundary gap estimation (DBGE), monitors the output of the ADC to estimate the size of code gaps that result at the decision boundaries of each stage. Code gaps result from such effects as capacitor mismatch, finite opamp gain, finite current source output impedance, comparator offset, and charge injection. DBGE does not require special calibration signals or additional analog hardware and can even reduce the performance requirements of the analog circuitry. The calibration is performed using the input signal and thus requires that the input signal exercise the codes in the vicinity of the decision boundaries of each stage. If it does not exercise these codes, then lack of calibration is less critical because the nonlinearities will not appear in the output signal. DBGE is simple and amenable to hardware and/or software implementations. Simulation results indicate DBGE is highly accurate, robust, and adaptive even in the presence of parameter drift and circuit noise.","1558-0806","","10.1109/TCSI.2008.925373","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4519952","Adaptive digital background calibration;capacitor mismatch;finite opamp gain;pipelined analog-to-digital converter (ADC);static nonlinearity;pipelined analog-to-digital converter (ADC);adaptive digital background calibration;capacitor mismatch;finite opamp gain;static non-linearity","Calibration;Analog-digital conversion;Density measurement;Capacitors;Hardware;Signal resolution;Impedance;Circuit simulation;Noise robustness;Circuit noise","analogue-digital conversion;calibration;circuit noise","decision boundary gap estimation;indirect background digital calibration;analog-to-digital converter;capacitor mismatch effect;analog circuitry;parameter drift;circuit noise","","40","6","27","IEEE","14 May 2008","","","IEEE","IEEE Journals"
"Beltway Buffers: Avoiding the OS Traffic Jam","W. de Bruijn; H. Bos","Vrije Universiteit Amsterdam, Netherlands; Vrije Universiteit Amsterdam, Netherlands","IEEE INFOCOM 2008 - The 27th Conference on Computer Communications","2 May 2008","2008","","","136","140","Beltway buffers are operating system I/O paths optimised for high-throughput network applications. The key architectural feature of Beltway buffers is that all I/O takes place in long-lived, allocation-free, shared ringbuffers. Advantages of this design are (1) improved throughput through system-wide copy, context-switch and allocation avoidance and judicious use of the data cache, (2) transparent integration of peripheral hardware and (3) simplicity and familiarity due to comprehensive use of the POSIX file interface for accessing streams.","0743-166X","978-1-4244-2025-4","10.1109/INFOCOM.2008.36","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4509631","","Operating systems;Splicing;Telecommunication traffic;Hardware;Sockets;Kernel;Costs;Network servers;Random access memory;Linux","application program interfaces;cache storage;network operating systems","Beltway buffer;operating system I/O path;OS traffic jam;high-throughput network application;data cache;peripheral hardware;POSIX file interface;ring buffer","","8","1","15","IEEE","2 May 2008","","","IEEE","IEEE Conferences"
"Domain Specific Code Generation For Linux Device Driver","J. C. Park; Y. H. Choi; T. h. Kim","University of Science and Technology (HKUST), Hong Kong, China; Electronics and Telecommunications Research Institute, University of Science and Technology (HKUST), Hong Kong, China; Electronics and Telecommunications Research Institute, University of Science and Technology (HKUST), Hong Kong, China","2008 10th International Conference on Advanced Communication Technology","22 Apr 2008","2008","1","","101","104","Device driver is the most important software of operating system to interact with hardware devices. As an essential part of operating system, device drivers must be reliable and efficient, because wrong operation can make a fatal system error and hardware performance is depends on the device driver. Therefore, it must be developed carefully and considered to be difficult to develop. Previously, we presented an automated source code generation framework and tool for Linux device drivers. In this paper, we present enhanced code generation framework for domain-specific device driver by usage domain and show detailed view of implementation.","1738-9445","978-89-5519-136-3","10.1109/ICACT.2008.4493721","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4493721","Device Driver;Code Generation;Embedded Software;Linux","Linux;Operating systems;Hardware;Kernel;Specification languages;Software systems;Reliability engineering;Knowledge engineering;Application software;XML","device drivers;Linux;operating systems (computers);program compilers","device driver;code generation;Linux;operating system","","2","","6","","22 Apr 2008","","","IEEE","IEEE Conferences"
"A Platform-Based Software Design Methodology for Embedded Control Systems: An Agile Toolkit","L. Cordeiro; C. Mar; E. Valentin; F. Cruz; D. Patrick; R. Barreto; V. Lucena","Departamento de Ciência da Computação, Universidade Federal do Amazonas, Brazil; Departamento de Ciência da Computação, Universidade Federal do Amazonas, Brazil; Departamento de Ciência da Computação, Universidade Federal do Amazonas, Brazil; Departamento de Ciência da Computação, Universidade Federal do Amazonas, Brazil; Departamento de Ciência da Computação, Universidade Federal do Amazonas, Brazil; Departamento de Ciência da Computação, Universidade Federal do Amazonas, Brazil; Centro de P&D em Tecnologia Eletrônica e da Informação (CETELI/UFAM), Brazil","15th Annual IEEE International Conference and Workshop on the Engineering of Computer Based Systems (ecbs 2008)","18 Apr 2008","2008","","","408","417","A discrete control system, with stringent hardware constraints, is effectively an embedded real-time system and hence requires a rigorous methodology to develop the software involved. The development methodology proposed in this paper adapts agile principles and patterns to support the building of embedded control systems, focusing on the issues relating to a system's constraints and safety. Strong unit testing, to ensure correctness, including the satisfaction of timing constraints, is the foundation of the proposed methodology. A platform-based design approach is used to balance costs and time-to-market in relation to performance and functionality constraints. It is concluded that the proposed methodology significantly reduces design time and costs, as well as leading to better software modularity and reliability.","","978-0-7695-3141-0","10.1109/ECBS.2008.19","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4492422","Agile methodologies;Embedded Agile Development;Platform-Based Design;Real-time Software","Software design;Control systems;Design methodology;Hardware;Real time systems;Embedded software;Buildings;Safety;Testing;Timing","control engineering computing;discrete systems;embedded systems;software reliability","platform-based software design methodology;embedded control systems;discrete control system;hardware constraints;embedded real-time system;platform-based design approach;performance-functionality constraints","","4","","23","IEEE","18 Apr 2008","","","IEEE","IEEE Conferences"
"Experiences in Adapting a Source Code-Based Quality Assessment Technology","J. Pantos; A. Beszedes; P. Gyenizse; T. Gyimothy","Department of Software Engineering, University of Szeged, Szeged, Hungary; Department of Software Engineering, University of Szeged, Szeged, Hungary; GriffSoft Informatics Plc., Thököly út 101., H-6726 Szeged, Hungary, +36 62 549100, pal.gyenizse@griffsoft.hu; Department of Software Engineering, University of Szeged, Szeged, Hungary","2008 12th European Conference on Software Maintenance and Reengineering","18 Apr 2008","2008","","","311","313","Testing-based software quality assurance often does not provide an appropriate level of efficiency and reliability. To aid this problem, different kinds of static verification techniques can be applied, like code metrics and code inspection. Many quality assessment methods that are based on static source code analysis has already been proposed, yet these can be used is particular industrial environment - in which often proprietary programming languages are used - only after appropriate adaptation. This paper presents experiences in adapting an existing technology and tools suitable for quality assessment based on source code analysis. The technology has demonstrated its success and usability in industrial environment; being capable of comprehensive and continuous quality monitoring of large and complex software systems involving proprietary technologies.","1534-5351","978-1-4244-2157-2","10.1109/CSMR.2008.4493335","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4493335","Software quality;quality assurance;software verification and validation;software metrics","Quality assessment;Software quality;Gain measurement;Software engineering;Informatics;Programmable control;Software testing;Computer industry;Monitoring;Software maintenance","program testing;program verification;software maintenance;software metrics;software quality;software reliability","quality assessment technology;testing-based software quality assurance;software reliability;static verification technique;static source code analysis;proprietary programming languages;continuous quality monitoring;software systems","","1","","11","IEEE","18 Apr 2008","","","IEEE","IEEE Conferences"
"Supporting Language Conversion by Metric Based Reports","G. Lajios; D. Schmedding; F. Volmering","Continentale Versicherung, Dortmund, Germany; Software Technology, Technical University Dortmund, Germany; Software Technology, Technical University Dortmund, Germany","2008 12th European Conference on Software Maintenance and Reengineering","18 Apr 2008","2008","","","314","316","Syntax analysis and metrics are combined to a tool chain for automatic generation of reports used to assist in language conversion from C++ to Java. The reports point out potential migration obstacles by identifying relevant parts of the source code, thus enabling developers to pre-edit the code selectively.","1534-5351","978-1-4244-2157-2","10.1109/CSMR.2008.4493336","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4493336","","Documentation;Software systems;Java;Software measurement;Lab-on-a-chip;Costs;Cloning;Phase change materials;Software metrics;Business","C++ language;Java;software maintenance;software metrics","language conversion;syntax analysis;C++ language;Java;source code;software metrics","","","","10","IEEE","18 Apr 2008","","","IEEE","IEEE Conferences"
"Supporting the Grow-and-Prune Model in Software Product Lines Evolution Using Clone Detection","T. Mende; F. Beckwermert; R. Koschke; G. Meier","University of Brethemen, Germany; University of Brethemen, Germany; University of Brethemen, Germany; Testo AG, Lenzkirch, Germany","2008 12th European Conference on Software Maintenance and Reengineering","18 Apr 2008","2008","","","163","172","Software product lines (SPL) can be used to create and maintain different variants of software-intensive systems by explicitly managing variability. Often, SPLs are organized as an SPL core, common to all products, upon which product-specific components are built. Following the so called grow-and-prune model, SPLs may be evolved by copy&paste at large scale. New products are created from existing ones and existing products are enhanced with functionalities specific to other products by copying and pasting code between product-specific code. To regain control of this unmanaged growth, such code may be pruned, that is, identified and refactored into core components upon success. This paper describes tool support for the grow-and- prune model in the evolution of software product lines by identifying similar functions which can be moved to the core. These functions are identified in two steps. First, token-based clone detection is used to detect pairs of functions sharing code. Second, Levenshtein distance measures the textual similarity among these functions. Sufficient similarity at function level is then lifted to the architectural level. The approach is evaluated by three case studies, one using an open source email client to simulate the initial creation of an SPL, and two monitoring existing industrial product lines from the embedded domain.","1534-5351","978-1-4244-2157-2","10.1109/CSMR.2008.4493311","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4493311","Software maintenance;Software reausability","Cloning;Software maintenance;Monitoring;Software reusability;Software systems;Software testing;System testing;Large-scale systems;Software tools;Open source software","software architecture;software maintenance;software reusability","grow-and-prune model;software product lines evolution;clone detection;software-intensive systems;copying-pasting code;product-specific code;functions sharing code;Levenshtein distance measures;textual similarity;architectural level;open source email client;industrial product lines","","41","","24","IEEE","18 Apr 2008","","","IEEE","IEEE Conferences"
"Using Dataflow Information for Concern Identification in Object-Oriented Software Systems","M. Trifu","FZI Forschungszentrum Informatik, Karlsruhe, Germany","2008 12th European Conference on Software Maintenance and Reengineering","18 Apr 2008","2008","","","193","202","Improper encapsulation of cross-cutting concerns significantly hinders software understandability and contributes to rising software maintenance costs. Concern identification covers the necessary first step towards separating and encapsulating concerns in existing object-oriented code. Because most of the current approaches rely on syntactic rather than semantic information, they do not provide sufficient support for software understanding. This paper proposes a new semi-automated approach for concern identification specifically designed to support software understanding, which starts from a set of related variables and uses static dataflow information to determine the concern skeleton, a data-oriented abstraction of a concern. We discuss the application of this approach to the JHotDraw case-study, the de facto standard benchmark for concern identification, and show that it can be used to identify a significant number of concerns, including several concerns not previously discussed in the existing literature.","1534-5351","978-1-4244-2157-2","10.1109/CSMR.2008.4493314","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4493314","concern identification;program understanding;feature extraction;dataflow analysis","Software systems;Software maintenance;Skeleton;Encapsulation;Costs;Software design;Application software;Feature extraction;Data analysis;Computer science","object-oriented methods;software maintenance","static dataflow information;concern identification;object-oriented software systems;cross-cutting concerns;software understandability;software maintenance costs;data-oriented abstraction;JHotDraw case-study","","13","","21","IEEE","18 Apr 2008","","","IEEE","IEEE Conferences"
"Extracting Domain Ontologies from Domain Specific APIs","D. Ratiu; M. Feilkas; J. Jurjens","Institut für Informatik, Technische Universität München, Garching, Germany; Institut für Informatik, Technische Universität München, Garching, Germany; Department of Computing, Open University, Milton Keynes, UK","2008 12th European Conference on Software Maintenance and Reengineering","18 Apr 2008","2008","","","203","212","Domain specific APIs offer their clients ready-to-use implementations of domain concepts. Beside being interfaces between the worlds of humans and computers, domain specific APIs contain a considerable amount of domain knowledge. Due to the big abstraction gap between the real world and today's programming languages, in addition to the knowledge about their domain, these APIs are cluttered with a considerable amount of noise in form of implementation detail. Furthermore, an API offers a particular view on its domain and different APIs regard their domains from different perspectives. In this paper we propose an approach for building domain ontologies by identifying commonalities between domain specific APIs that target the same domain. Besides our ontology extraction algorithm, we present a methodology for eliminating the noise and we sketch possible usage-scenarios of the ontologies for program analysis and understanding. We evaluate our approach through a set of case-studies on extracting domain ontologies from well-known domain specific APIs.","1534-5351","978-1-4244-2157-2","10.1109/CSMR.2008.4493315","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4493315","Reverse engineering;Libraries;Knowledge acquisition","Ontologies;Computer languages;Libraries;Reverse engineering;Graphical user interfaces;Programming profession;Humans;Computer interfaces;Algorithm design and analysis;Knowledge acquisition","application program interfaces;ontologies (artificial intelligence);program diagnostics;reverse engineering","domain ontology extraction;domain specific API;domain knowledge;program analysis;program understanding","","19","","16","IEEE","18 Apr 2008","","","IEEE","IEEE Conferences"
"Reengineering Idiomatic Exception Handling in Legacy C Code","M. Bruntink","Centrum voor Wiskunde en Informatica, Delft University of Technnology, Netherlands","2008 12th European Conference on Software Maintenance and Reengineering","18 Apr 2008","2008","","","133","142","Some legacy programming languages, e.g., C, do not provide adequate support for exception handling. As a result, users of these legacy programming languages often implement exception handling by applying an idiom. An idiomatic style of implementation has a number of drawbacks: applying idioms can be fault prone and requires significant effort. Modern programming languages provide support for structured exception handling (SEH) that makes idioms largely obsolete. Additionally, aspect-oriented programming (AOP) is believed to further reduce the effort of implementing exception handling. This paper investigates the gains that can be achieved by reengineering the idiomatic exception handling of a legacy C component to these modern techniques. First, we will reengineer a C component such that its exception handling idioms are almost completely replaced by SEH constructs. Second, we will show that the use of AOP for exception handling can be beneficial, even though the benefits are limited by inconsistencies in the legacy implementation.","1534-5351","978-1-4244-2157-2","10.1109/CSMR.2008.4493308","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4493308","software maintenance;exception handling;aspect-oriented programming","Computer languages;Software systems;Programming profession;Software maintenance;Books;Manufacturing;Lithography;Control systems;Java;Performance analysis","C language;exception handling;object-oriented programming;software maintenance;systems re-engineering","idiomatic exception handling reengineering;legacy C component;legacy programming languages;structured exception handling;aspect-oriented programming;SEH constructs","","3","","13","IEEE","18 Apr 2008","","","IEEE","IEEE Conferences"
"Aligning Software Maintenance to the Offshore Reality","C. Seybold; R. K. Keller","Zühlke Engineering AG, Zurich, Switzerland; Zühlke Engineering AG, Zurich, Switzerland","2008 12th European Conference on Software Maintenance and Reengineering","18 Apr 2008","2008","","","33","42","With an ever-increasing amount of software in place, the importance and ubiquity of software maintenance is continuously growing. Another more recent trend is to ""offshore"" such work to low-wage countries with still untapped engineering resources. However, software maintenance typically requires intensive customer contact, short iteration cycles, and fast response times which is counter to the communication delays, requirements misinterpretations and indirect responsibilities often found in offshore cooperations. This paper reports on a software maintenance project in the power plant engineering sector. From the outset, the project included, in line with corporate policy, heavy offshore involvement. This 'offshore reality' confronted the stakeholders with various problems, including lack of quality, slipped deadlines, and communication overhead. A number of measures were introduced to mitigate the problems. Finally, a project setup could be found satisfying both the characteristics of software maintenance projects and the peculiarities of offshore cooperations. In the paper, we describe and analyze the course of this project, and present a list of lessons learned and best practices for this uncommon, yet increasingly important project setup.","1534-5351","978-1-4244-2157-2","10.1109/CSMR.2008.4493298","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4493298","","Software maintenance;Power engineering and energy;Delay;Business;Counting circuits;Power generation;Best practices;Maintenance engineering;Computer industry;Software engineering","outsourcing;project management;software development management;software maintenance","software maintenance;offshore outsourcing;power plant engineering;software project","","3","","13","IEEE","18 Apr 2008","","","IEEE","IEEE Conferences"
"Architecture Compliance Checking - Experiences from Successful Technology Transfer to Industry","J. Knodel; D. Muthig; U. Haury; G. Meier","Fraunhofer Institute of Experimental Software Engineering (IESE), Kaiserslautern, Germany; Fraunhofer Institute of Experimental Software Engineering (IESE), Kaiserslautern, Germany; Testo AG, Lenzkirch, Germany; Testo AG, Lenzkirch, Germany","2008 12th European Conference on Software Maintenance and Reengineering","18 Apr 2008","2008","","","43","52","New ideas and concepts emerging from research have to be accepted by industrial stakeholders before they are used in product development. In this paper, we present our lessons learned and experiences gained from transferring a reverse engineering technology - architecture compliance checking - to Testo AG, one of the world's leading suppliers of portable measurement devices for industry and emission business. Testo develops a product line of climate and flue gas measurement devices and uses architecture compliance checking as the means to ensure consistency between the specified reference architecture and the implemented products. After delivery of more than a dozen products to the market, we present how architecture compliance checking has been transferred and how it became one instrument for ensuring the high quality of Testo products.","1534-5351","978-1-4244-2157-2","10.1109/CSMR.2008.4493299","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4493299","architecture compliance checking;software architecture;product line engineering;PuLSE;SAVE;technology transfer","Technology transfer;Testing;Computer architecture;Reverse engineering;Prototypes;Computer industry;Flue gases;Maintenance engineering;Software maintenance;Embedded system","product development;program verification;reverse engineering;software architecture;technology transfer","architecture compliance checking;industrial stakeholders;product development;reverse engineering technology;Testo AG;flue gas measurement devices;technology transfer","","13","","30","IEEE","18 Apr 2008","","","IEEE","IEEE Conferences"
"Discovering Neglected Conditions in Software by Mining Dependence Graphs","R. -Y. Chang; A. Podgurski; J. Yang","Department of Electrical Engineering and Computer Science, Case Western Reserve University, Cleveland, OH, USA; Department of Electrical Engineering and Computer Science, Case Western Reserve University, Cleveland, OH, USA; Department of Electrical Engineering and Computer Science, Case Western Reserve University, Cleveland, OH, USA","IEEE Transactions on Software Engineering","30 Sep 2008","2008","34","5","579","596","Neglected conditions are an important but difficult-to-find class of software defects. This paper presents a novel approach to revealing neglected conditions that integrates static program analysis and advanced data mining techniques to discover implicit conditional rules in a code base and to discover rule violations that indicate neglected conditions. The approach requires the user to indicate minimal constraints on the context of the rules to be sought, rather than specific rule templates. To permit this generality, rules are modeled as graph minors of enhanced procedure dependence graphs (EPDGs), in which control and data dependence edges are augmented by edges representing shared data dependences. A heuristic maximal frequent subgraph mining algorithm is used to extract candidate rules from EPDGs, and a heuristic graph matching algorithm is used to identify rule violations. We also report the results of an empirical study in which the approach was applied to four open source projects (openssl, make, procmail, amaya). These results indicate that the approach is effective and reasonably efficient.","1939-3520","","10.1109/TSE.2008.24","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4492791","Methods for SQA and V&;V;Pre- and post-conditions;Methods for SQA and V&V;Pre- and post-conditions","Data mining;Computer bugs;Buffer overflow;Databases;Computer Society;Data analysis;Heuristic algorithms;Open source software;Operating systems;Linux","data mining;graph theory;program diagnostics","dependence graph mining;neglected conditions;software defects;static program analysis;data mining techniques;enhanced procedure dependence graphs;heuristic maximal frequent subgraph mining algorithm","","47","2","56","IEEE","18 Apr 2008","","","IEEE","IEEE Journals"
"CATCH: A Mechanism for Dynamically Detecting Cache-Content-Duplication and its Application to Instruction Caches","M. Kleanthous; Y. Sazeides","Department of Computer Science, University of Cyprus, Cyprus; Department of Computer Science, University of Cyprus, Cyprus","2008 Design, Automation and Test in Europe","11 Apr 2008","2008","","","1426","1431","Cache-Content-Duplication (CCD) occurs when there is a miss for a block in a cache and the entire content of the missed block is already in the cache in a block with a different tag. Caches aware of content-duplication can have lower miss rates by allowing only blocks with unique content to enter a cache. This work examines the potential of CCD for instruction caches. We show that CCD is a frequent phenomenon and that an idealized duplication- detection mechanism for instruction caches has the potential to increase performance of an out-of-order processor, with a 2-way eight instruction per block 16 KB instruction cache, often by more than 5% and up to 20%. This work also proposes CATCH, a hardware based mechanism for dynamically detecting CCD. Experimental results for an out-of-order processor show that a CATCH with a 2.32 KB cost usually captures 60% or more of the CCD's idealized potential.","1558-1101","978-3-9810801-3-1","10.1109/DATE.2008.4484874","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4484874","","Charge coupled devices;Hardware;Compaction;Out of order;Costs;User-generated content;Program processors;Application software;Computer science;Delay","cache storage;instruction sets","CATCH mechanism;instruction caches;cache-content-duplication;CCD","","1","","13","","11 Apr 2008","","","IEEE","IEEE Conferences"
"Refactoring Effect Estimation Based on Complexity Metrics","Y. Higo; Y. Matsumoto; S. Kusumoto; K. Inoue","Graduate School of Information Science and Technology, Osaka University, Toyonaka, Osaka, Japan; Graduate School of Information Science and Technology, Osaka University, Toyonaka, Osaka, Japan; Graduate School of Information Science and Technology, Osaka University, Toyonaka, Osaka, Japan; Graduate School of Information Science and Technology, Osaka University, Toyonaka, Osaka, Japan","19th Australian Conference on Software Engineering (aswec 2008)","3 Apr 2008","2008","","","219","228","Refactoring is a set of operations to improve maintainability or understandability or other attributes of a software system without changing the external behavior of it, and it is getting much attention recently. However it is difficult to perform appropriate refactorings since the impact of refactoring should justify the cost. Therefore, before a refactoring is really performed, the effect and the cost of it should be estimated. The estimation makes it possible for us to adequately assess whether each refactoring should be performed or not. This paper shows that it is difficult for developers to perform appropriate refactorings, and proposes a method estimating refactoring effect. The method has been implemented as a software tool, and a case study was conducted with it. The result of the case study showed that the estimation of the tool helped a developer of the target software system to perform an appropriate refactoring.","2377-5408","978-0-7695-3100-7","10.1109/ASWEC.2008.4483210","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4483210","Refactoring;Software Maintenance;Software Metrics","Software systems;Costs;Software measurement;Software tools;Software maintenance;Australia;Software engineering;Information science;Software testing;System testing","software maintenance;software tools","refactoring effect estimation;software tool","","8","","21","IEEE","3 Apr 2008","","","IEEE","IEEE Conferences"
"Using the Conceptual Cohesion of Classes for Fault Prediction in Object-Oriented Systems","A. Marcus; D. Poshyvanyk; R. Ferenc","Department of Computer Science, Wayne State University, Detroit, MI, USA; Department of Computer Science, Wayne State University, Detroit, MI, USA; Department of Software Engineering, University of Szeged, Szeged, Hungary","IEEE Transactions on Software Engineering","31 Mar 2008","2008","34","2","287","300","High cohesion is a desirable property of software as it positively impacts understanding, reuse, and maintenance. Currently proposed measures for cohesion in Object-Oriented (OO) software reflect particular interpretations of cohesion and capture different aspects of it. Existing approaches are largely based on using the structural information from the source code, such as attribute references, in methods to measure cohesion. This paper proposes a new measure for the cohesion of classes in OO software systems based on the analysis of the unstructured information embedded in the source code, such as comments and identifiers. The measure, named the Conceptual Cohesion of Classes (C3), is inspired by the mechanisms used to measure textual coherence in cognitive psychology and computational linguistics. This paper presents the principles and the technology that stand behind the C3 measure. A large case study on three open source software systems is presented which compares the new measure with an extensive set of existing metrics and uses them to construct models that predict software faults. The case study shows that the novel measure captures different aspects of class cohesion compared to any of the existing cohesion measures. In addition, combining C3 with existing structural cohesion metrics proves to be a better predictor of faulty classes when compared to different combinations of structural cohesion metrics.","1939-3520","","10.1109/TSE.2007.70768","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4384505","Maintainability;Metrics/Measurement;Quality analysis and evaluation;Restructuring;reverse engineering;and reengineering;Code documentation;Document analysis;Document indexing;Maintainability;Metrics/Measurement;Quality analysis and evaluation;Restructuring;reverse engineering;and reengineering;Code documentation;Document analysis;Document indexing","Software measurement;Open source software;Software maintenance;Current measurement;Particle measurements;Software systems;Information analysis;Coherence;Psychology;Computational linguistics","object-oriented programming;software fault tolerance;software metrics","conceptual class cohesion;object-oriented software system;open source software system;software metrics;software fault prediction","","193","1","78","IEEE","31 Mar 2008","","","IEEE","IEEE Journals"
"Ariadne: An Eclipse-based system for tracking originality of source code","L. Luo; D. M. Hao; Z. Tian; Y. B. Dang; B. Hou; P. Malkin; S. X. Yang","IBM Research Division, China Research Laboratory, Beijing, China; IBM Research Division, China Research Laboratory, Beijing, China; IBM Software Group, China Development Laboratories, Beijing, China; IBM Research Division, China Research Laboratory, Beijing, China; State Key Laboratory of Networking and Switching, Beijing University of Posts and Telecommunications, Beijing, China; IBM Research Division, IBM Thomas J. Watson Research Center, Hawthorne, NY, USA; IBM Research Division, China Research Laboratory, Beijing, China","IBM Systems Journal","6 Apr 2010","2007","46","2","289","303","In this paper we introduce Ariadne, an Eclipse-based system for tracking the originality of source code in collaborative software development environments in which software reuse is a common practice. We describe its architecture within the Eclipse framework, the originality metadata of which it keeps track, and the history clue—the data structure used to implement the tracking mechanism. We also discuss the implementation of the Ariadne client, the main component of the system, and show how digital signatures are used to validate the integrity of the metadata-handling process. We demonstrate the functions of Ariadne in two typical scenarios: tracking of software bugs and generating originality claims for Certificate of Originality reports. Although our Eclipse-based prototype is designed to handle Java source code, our approach can be extended to other kinds of artifacts.","0018-8670","","10.1147/sj.462.0289","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5386615","","","","","","","4","","","6 Apr 2010","","","IBM","IBM Journals"
"A new look at software plagiarism investigation and copyright infringement","S. A. El-Wahed; A. Elfatatry; M. S. Abougabal","Institute of Graduate Studies and Research, Information Technology Department, Alexandria University, Egypt; Department of Information Technology, Alexandria University, Egypt; Computer and Systems Engineering at the, Alexandria University, Egypt","2007 ITI 5th International Conference on Information and Communications Technology","21 Mar 2008","2007","","","315","318","In the context of detecting possible copyright infringement, finding a correlation between the source code files for two different programs does not necessarily mean that illicit behavior occurred. Ideas, concepts, facts, processes and methods are not in themselves protected by copyright law. Therefore, not everything in software is subject to copyright or patent protection. It is possible to write software that is not protected by either. Expert opinion may be needed in court in order to determine whether an intellectual property infringement has occurred or not. This may involve a comparison of the source code. This basic legal retirement is explicitly the core of the case. The main contribution of this paper is the suggestion of a framework for understanding of the legal consequences of similarity in software code. Because comparing two works of software is not as simple as a line-by-line comparison.","2329-6372","978-1-4244-1430-7","10.1109/ITICT.2007.4475669","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4475669","Copyright Infringement;Intellectual Property;Plagiarism;Software Forensics","Plagiarism;Protection;Law;Legal factors;Intellectual property;Information technology;Detection algorithms;Software tools;Guidelines;Forensics","copy protection;copyright;patents","software plagiarism;copyright infringement;source code files;copyright law;patent protection;intellectual property infringement;legal consequences;software code","","3","","19","IEEE","21 Mar 2008","","","IEEE","IEEE Conferences"
"McC and Mc#: Unified C++ and C# Design Facts Extractors Tools","P. F. Mihancea; G. Ganea; I. Verebi; C. Marinescu; R. Marinescu","LOOSE Research Group, Politehnica University of Timişoara, Romania; LOOSE Research Group, Politehnica University of Timişoara, Romania; LOOSE Research Group, Politehnica University of Timişoara, Romania; LOOSE Research Group, Politehnica University of Timişoara, Romania; LOOSE Research Group, Politehnica University of Timişoara, Romania","Ninth International Symposium on Symbolic and Numeric Algorithms for Scientific Computing (SYNASC 2007)","22 Jan 2008","2007","","","101","104","In the last years, as object-oriented software systems have become more and more complex, the need of performing automatically reverse engineering upon such systems has significantly increased. It is well known that one step toward a research infrastructure accelerating the progress of reverse engineering is the creation of an intermediate representation of software systems. In the current demonstration we present an unified structure for representing object- oriented systems written in C++ and C#, together with the corresponding model capturing tools. As a result, we can uniformly analyze C++ and C# systems. Moreover, we have integrated the tools in the iPlasma reengineering infrastructure which permits us to obtain easily valuable information for a reverse engineering process.","","978-1-5090-8739-6","10.1109/SYNASC.2007.13","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4438085","","Data mining;Reverse engineering;Java;Software systems;Object oriented modeling;Information analysis;Acceleration;Computer languages;Concrete;Software algorithms","C++ language;object-oriented methods;reverse engineering","McC;Mc#;C++;C# design;reverse engineering;object- oriented system;model capturing tool;fact extractor tool","","3","","13","IEEE","22 Jan 2008","","","IEEE","IEEE Conferences"
"Managing Reconfigurable Resources in Heterogeneous Cores Using Portable Pre-Synthesized Templates","M. Santambrogio; M. Giani; S. O. Memik","Dipartimento di Elettronica e Informazione, Politecnico di Milano, Milan, Italy; Dipartimento di Elettronica e Informazione, Politecnico di Milano, Milan, Italy; EECS Department, Northwestern University, Evanston, IL, USA","2007 International Symposium on System-on-Chip","14 Jan 2008","2007","","","1","4","In this paper we consider multi-FPGAs, reconfiguration and system description portability as the processes of specifying and modeling a complete system before it is partitioned and committed to a style/flow of implementation. In the case of a high performance computing cluster employing FPGAs, the reconfigurable elements need to be dynamically re-allocated and reconfigured based on the prevailing workload at a given instance. We particularly target fast configuration and task migration in high performance computing systems, such as server farms. This paper presents a design flow, based in resource sharing across configurations on the reconfigurable devices, which can manage the resource allocation and reconfiguration quickly when resources need to be migrated between different applications. The resources shared across configuration are defined using an isomorphic-driven partitioning approach. This technique detects recurrent structures and produces a partitioned specification in which the identified clusters are instances of repeating templates in the original graph used to describe the input application. Two algorithms for regularity extraction were implemented. The performances of the algorithms were compared with regard to the size and number of regular structures identified by the two approaches, as well as the lime taken to perform their task.","","978-1-4244-1367-6","10.1109/ISSOC.2007.4427446","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4427446","","Resource management;Field programmable gate arrays;High performance computing;Multicore processing;Runtime;Clustering algorithms;Partitioning algorithms;Signal processing algorithms;Large-scale systems;Scientific computing","field programmable gate arrays;graph theory;logic partitioning;reconfigurable architectures;resource allocation","FPGA;reconfigurable resource management;heterogeneous core;portable pre-synthesized template;system description portability;high performance computing cluster;isomorphic-driven partitioning approach;recurrent structure detection;graph theory","","","5","9","IEEE","14 Jan 2008","","","IEEE","IEEE Conferences"
"Applying a Code Clone Detection Method to Domain Analysis of Device Drivers","Y. -S. Ma; D. -K. Woo","Division of Embedded Software Research, Electronics and Telecommunications Research Institute, Daejeon, South Korea; Division of Embedded Software Research, Electronics and Telecommunications Research Institute, Daejeon, South Korea","14th Asia-Pacific Software Engineering Conference (APSEC'07)","7 Jan 2008","2007","","","254","261","Domain analysis is the process of analyzing related software systems in a domain to find their common and variable parts. In the case of device drivers, they are highly suitable for domain analysis because device drivers of the same domain are implemented similarly for each device and each system that they support. Considering this characteristic, this paper introduces a new approach to the domain analysis of device drivers. Our method uses a code clone detection technique to extract similarity among device drivers of the same domain. To examine the applicability of our method, we investigated whole device drivers of a Linux source. Results showed that many reusable similar codes can be discerned by the code clone detection method.","1530-1362","0-7695-3057-5","10.1109/ASPEC.2007.16","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4425862","","Cloning;Driver circuits;Specification languages;Information analysis;Organizing;Software engineering;Embedded software;Software systems;Linux;Software reusability","data flow analysis;device drivers;Linux","code clone detection method;domain analysis;device drivers;software systems;Linux source","","4","","13","IEEE","7 Jan 2008","","","IEEE","IEEE Conferences"
"Simultaneous Modification Support based on Code Clone Analysis","Y. Higo; Y. Ueda; S. Kusumoto; K. Inoue","Graduate School of Information Science and Technology, Osaka University, Toyonaka, Osaka, Japan; JAXAs Engineering Digital Innovation Center, Japan Aerospace Exploration Agency, Tsukuba, Ibaraki, Japan; Graduate School of Information Science and Technology, Osaka University, Toyonaka, Osaka, Japan; Graduate School of Information Science and Technology, Osaka University, Toyonaka, Osaka, Japan","14th Asia-Pacific Software Engineering Conference (APSEC'07)","7 Jan 2008","2007","","","262","269","Maintaining software systems becomes more difficult as their size and complexity increase. One factor that makes software maintenance more difficult is the presence of code clones. A code clone is defined as a code fragment occurring more than once in identical or similar form into a software system. For example, the presence of code clones is a big factor of overlooking some places that should be modified simultaneously. One technique that helps the number of code clones is refactoring. There are several research efforts that provide support to refactor code clones, but unfortunately some code clones cannot or should not be refactored (ex. stereotyped process, absence of abstraction functionality, performance enhancement). In order to support maintaining the consistency among code clones, we propose a simultaneous modification support method. Given a software system, firstly, a maintainer identifies a code fragment that must be modified. Then, only the code clones between the identified code fragment and the source files of the software system are detected. We developed a simultaneous modification support tool, Libra, and applied it to open source software systems. The results showed that Libra was a good searching tool as much as grep, which is a useful tool of UNIX.","1530-1362","0-7695-3057-5","10.1109/ASPEC.2007.44","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4425863","","Cloning;Software maintenance;Software systems;Costs;Merging;Software engineering;Information analysis;Information science;Maintenance engineering;Technological innovation","public domain software;software maintenance;Unix","code clone analysis;software systems;software maintenance;code fragment;refactoring;simultaneous modification support method;Libra;open source software systems;searching tool;UNIX","","16","","31","IEEE","7 Jan 2008","","","IEEE","IEEE Conferences"
"Toward Efficient Aspect Mining for Linux","D. Zhang; Y. Guo; Y. Wang; X. Chen","Key laboratory of High Confidence Software Technologies, Ministry of Education Institute of Software, School of Electronics Engineering and Computer Science, Peking University, China; Key laboratory of High Confidence Software Technologies, Ministry of Education Institute of Software, School of Electronics Engineering and Computer Science, Peking University, China; Key laboratory of High Confidence Software Technologies, Ministry of Education Institute of Software, School of Electronics Engineering and Computer Science, Peking University, China; Key laboratory of High Confidence Software Technologies, Ministry of Education Institute of Software, School of Electronics Engineering and Computer Science, Peking University, China","14th Asia-Pacific Software Engineering Conference (APSEC'07)","7 Jan 2008","2007","","","191","198","Code implementing a crosscutting concern spreads over many parts of the Linux code. Identifying these code automatically can benefit both the maintainability and evolvability of Linux. In this paper, we present a case study on how to identify aspects in the Linux code. First, we analyze four typical crosscutting concerns in Linux and show how to apply existing mining approaches to identify these concerns. We then propose three new mining approaches and compare their performance with the original methods. Experiments show that the proposed mining approaches can find these concerns more efficiently in Linux.","1530-1362","0-7695-3057-5","10.1109/ASPEC.2007.30","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4425854","","Linux;Open source software;Software engineering;Laboratories;Educational technology;Computer science education;Maintenance engineering;Computer science;Programming profession;Genetic programming","Linux;object-oriented programming;program diagnostics;software maintenance","aspect mining;Linux code;code identification;Linux maintainability;Linux evolvability;aspect identification;crosscutting concerns","","2","","21","IEEE","7 Jan 2008","","","IEEE","IEEE Conferences"
"Co-evolution of test programs and stimuli vectors for testing of embedded peripheral cores","L. Bolzani; E. Sanchez; M. Schillaci; G. Squillero","Dipartimento di Automatica e Informatica, Politecnico di Torino, Italy; Dipartimento di Automatica e Informatica, Politecnico di Torino, Italy; Dipartimento di Automatica e Informatica, Politecnico di Torino, Italy; Dipartimento di Automatica e Informatica, Politecnico di Torino, Italy","2007 IEEE Congress on Evolutionary Computation","7 Jan 2008","2007","","","3474","3481","Research community has not investigated as deeply as necessary the test generation problem of peripheral modules inside a system-on-a-chip (SoC), yet. Testing process for a peripheral core requires two distinct but highly correlated tasks: peripheral configuration and peripheral exercising. The configuration task is usually performed by an assembly program executed by the microprocessor with the SoC; whereas peripheral exercising directly concerns to the use of the device, which may be activated by both the executed program and a carefully devised set of external stimuli. When embedded in a SoC, peripheral cores introduce new issues for their testing. In this paper an automatic approach able to co-evolve assembly programs and stimuli sets for peripheral cores embedded in a SoC is described. The presented approach is based on an evolutionary algorithm that exploits high-level simulation and gathers coverage metrics information to produce the test sets. The proposed method considerably reduces the required efforts to produce a suitable test set with respect to the previous approaches, broadening its applicability and increasing its usefulness.","1941-0026","978-1-4244-1339-3","10.1109/CEC.2007.4424922","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4424922","","Testing;Evolutionary computation;Linear discriminant analysis","automatic test software;embedded systems;evolutionary computation;logic testing;microprocessor chips;system-on-chip","stimuli vector;embedded peripheral core testing;system-on-chip;peripheral configuration;peripheral exercising;assembly program;microprocessor;evolutionary algorithm;high-level simulation;coverage metrics information","","4","","16","IEEE","7 Jan 2008","","","IEEE","IEEE Conferences"
"Clone Detection via Structural Abstraction","W. S. Evans; C. W. Fraser; F. Ma","Department of Computer Science, University of British Columbia, Vancouver, BC, Canada; Microsoft Research Limited, India; Microsoft, Redmond, WA, USA","14th Working Conference on Reverse Engineering (WCRE 2007)","10 Dec 2007","2007","","","150","159","This paper describes the design, implementation, and application of a new algorithm to detect cloned code. It operates on the abstract syntax trees formed by many compilers as an intermediate representation. It extends prior work by identifying clones even when arbitrary subtrees have been changed. On a 440,000-line code corpus, 20-50% of the clones it detected were missed by previous methods. The method also identifies cloning in declarations, so it is somewhat more general than conventional procedural abstraction.","2375-5369","978-0-7695-3034-5","10.1109/WCRE.2007.15","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4400161","","Cloning;Detectors;Assembly;Tree graphs;Programming profession;Algorithm design and analysis;Object detection;Pattern matching;Functional programming;Computer science","abstract data types;Java;program compilers;program diagnostics;tree data structures","cloned code detection algorithm;structural abstraction;abstract syntax trees;program compilers;Java","","19","","27","IEEE","10 Dec 2007","","","IEEE","IEEE Conferences"
"Extending the Reflexion Method for Consolidating Software Variants into Product Lines","P. Frenzel; R. Koschke; A. P. J. Breu; K. Angstmann","University of Brethemen, Germany; University of Brethemen, Germany; Robert Bosch GmbH, Germany; Robert Bosch GmbH, Germany","14th Working Conference on Reverse Engineering (WCRE 2007)","10 Dec 2007","2007","","","160","169","Software variants emerge from ad-hoc copying in- the-large with adaptations to a specific context. As the number of variants increases, maintaining such software variants becomes more and more difficult and expensive. In contrast to such ad-hoc reuse, software product lines offer organized ways of reuse, taking advantage of similarities of different products. To re-gain control, software variants may be consolidated as organized software product lines. In this paper, we describe a method and supporting tools to compare software variants at the architectural level extending the reflexion method to software variants. Murphy's reflexion method allows one to reconstruct the module view, a static architectural view describing the static components, their interfaces and dependencies and their grouping as layers and subsystems. The method consists of the specification of the module view and the mapping of implementation components onto the module view. An automatic analysis determines differences between the module view and its implementation. We extend the reflexion method from single systems to software variants. Because software variants share a very large amount of code, we use clone detection techniques to identify corresponding implementation components between variants. The correspondence is then used to transfer as much of the mapping for the analyzed variants to the next variant to be analyzed.","2375-5369","978-0-7695-3034-5","10.1109/WCRE.2007.28","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4400162","","Cloning;Computer architecture;Software maintenance;Software tools;Software engineering;Software systems;Asset management;Software development management;Product development;Wrapping","product development;software architecture;software reusability","software variant;Murphy reflexion method;software product line;ad-hoc reuse;software architecture;clone detection technique","","20","1","27","IEEE","10 Dec 2007","","","IEEE","IEEE Conferences"
"A Study of Consistent and Inconsistent Changes to Code Clones","J. Krinke","Fern Universität, Hagen, Germany","14th Working Conference on Reverse Engineering (WCRE 2007)","10 Dec 2007","2007","","","170","178","Code cloning is regarded as a threat to software maintenance, because it is generally assumed that a change to a code clone usually has to be applied to the other clones of the clone group as well. However, there exists little empirical data that supports this assumption. This paper presents a study on the changes applied to code clones in open source software systems based on the changes between versions of the system. It is analyzed if changes to code clones are consistent to all code clones of a clone group or not. The results show that usually half of the changes to code clone groups are inconsistent changes. Moreover, the study observes that when there are inconsistent changes to a code clone group in a near version, it is rarely the case that there are additional changes in later versions such that the code clone group then has only consistent changes.","2375-5369","978-0-7695-3034-5","10.1109/WCRE.2007.7","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4400163","","Cloning;Software maintenance;Open source software;Computer bugs;Software systems;Programming profession;Costs","configuration management;public domain software;software maintenance","inconsistent changes;code cloning;software maintenance;open source software systems;system versions","","105","","24","IEEE","10 Dec 2007","","","IEEE","IEEE Conferences"
"Object-Oriented Similarity Measures for Semantic Web Service Matchmaking","G. Meditskos; N. Bassiliades","Aristotle University of Thessaloniki, Greece; Aristotle University of Thessaloniki, Greece","Fifth European Conference on Web Services (ECOWS'07)","10 Dec 2007","2007","","","57","66","The semantic annotation of Web services capabilities with ontological information aims at providing the necessary infrastructure for facilitating efficient and accurate service discovery. The main idea is to apply reasoning techniques over semantically enhanced Web service requests and advertisements in order to determine Web services that meet certain requirements. In this paper we present our work for introducing similarity measures inspired from the domain of Object-Oriented paradigm for ontology concept matching. Our work focuses on the utilization of such measures over an Object-Oriented schema that is created through mapping rules of OWL constructs and semantics into the Object-Oriented model. The goal of the approach is to combine the Object-Oriented representation of the information and the reasoning over OWL semantics in order to enhance the retrieval of semantically relevant, to some criteria, Web services.","","978-0-7695-3044-4","10.1109/ECOWS.2007.10","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4399735","","Semantic Web;Web services;Ontologies;OWL;Object oriented modeling;Information retrieval;Clustering algorithms;Web and internet services;Automation;Search engines","","","","10","","23","IEEE","10 Dec 2007","","","IEEE","IEEE Conferences"
"Trust and Security in RFID-Based Product Authentication Systems","M. O. Lehtonen; F. Michahelles; E. Fleisch","Swiss Federal Institute of Technology, Information Management, ETH Zurich, Zurich, Switzerland; Swiss Federal Institute of Technology, Information Management, ETH Zurich, Zurich, Switzerland; Swiss Federal Institute of Technology, Information Management, ETH Zurich, Zurich, Switzerland","IEEE Systems Journal","27 Nov 2007","2007","1","2","129","144"," Product authentication is needed to detect counterfeit products and to prevent them from entering the distribution channels of genuine products. Security is a critical property of product authentication systems. In this paper, we study trust and security in RFID-based product authentication systems. We first present a formal definition for product authentication process and then derive the general chain of trust as well as functional and nonfunctional security requirements for product authentication. Most of the scientific literature that covers the topic focuses on cryptographic tag authentication only. This paper, however, provides a broader view including also other known approaches, most notably location-based authentication. To derive the functional security requirements, we employ the concept of misuse cases that extends the use case paradigm well known in the field of requirements engineering. We argue that the level of security of any RFID-based product authentication application is determined by how it fulfills the derived set of functional and nonfunctional requirements. The security of different RFID-based product authentication approaches is analyzed. To study how RFID supports secure product authentication in practice, we investigate how the current EPC standards conform to the functional security requirements of product authentication and show how the unaddressed requirements could be fulfilled. The benefits of implementing a service that detects the cloned tags in the level of the network's core services are identified. ","1937-9234","","10.1109/JSYST.2007.909820","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4383013","Product authentication;product codes;radio frequency identification (RFID);security;system analysis and design","Security;Authentication;Radiofrequency identification;Counterfeiting;Information management;Supply chains;Europe;Cryptography;Product codes;System analysis and design","message authentication;radiofrequency identification;systems analysis","trust;RFID-based product authentication system;counterfeit product;security requirement;location-based authentication;requirements engineering;nonfunctional requirements;EPC standard;product code;system analysis;system design","","46","1","61","IEEE","27 Nov 2007","","","IEEE","IEEE Journals"
"Software Evolvability: An Ecosystem Point of View","L. Yu; S. Ramaswamy; J. Bush","Computer Science and Informatics, Indiana University, South Bend, IN, USA; Computer Science Department, University of Arkansas, Little Rock, Little Rock, AR, USA; Biology Department, University of Arkansas, Little Rock, Little Rock, AR, USA","Third International IEEE Workshop on Software Evolvability 2007","12 Nov 2007","2007","","","75","80","Software systems need to evolve to adapt to either a new environment or a new requirement. This position paper discusses the evolution of a software system from the viewpoint of an ecosystem and asserts that the evolution of a software system is not a standalone process but an aggregate process of other related software systems that forms a software ecosystem. This paper describes several of our ongoing projects in studying different types of symbiotic relationships between software systems and their effects on software evolution.","","978-0-7695-3002-4","10.1109/SE.2007.8","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4383101","","Ecosystems;Software systems;Symbiosis;Evolution (biology);Linux;Organisms;Computer science;USA Councils;Operating systems;Conferences","ecology;evolution (biological);software engineering","software evolvability;ecosystem;aggregate process;symbiotic relationships","","3","","21","IEEE","12 Nov 2007","","","IEEE","IEEE Conferences"
"SQL-Injection Security Evolution Analysis in PHP","E. Merlo; D. Letarte; G. Antoniol","Department of Computer Engineering, École Polytechnique, Centreville, QUE, Canada; Department of Computer Engineering, École Polytechnique, Centreville, QUE, Canada; Department of Computer Engineering, École Polytechnique, Centreville, QUE, Canada","2007 9th IEEE International Workshop on Web Site Evolution","12 Nov 2007","2007","","","45","49","Web sites are often a mixture of static sites and programs that integrate relational databases as a back-end. Software that implements Web sites continuously evolve to meet ever-changing user needs. As a Web sites evolve, new versions of programs, interactions and functionalities are added and existing ones are removed or modified. Web sites require configuration and programming attention to assure security, confidentiality, and trustiness of the published information. During evolution of Web software, from one version to the next one, security flaws may be introduced, corrected, or ignored. This paper presents an investigation of the evolution of security vulnerabilities as detected by propagating and combining granted authorization levels along an inter-procedural control flow graph (CFG) together with required security levels for DB accesses with respect to SQL-injection attacks. The paper reports results about experiments performed on 31 versions of phpBB, that is a publicly available bulletin board written in PHP, version 1.0.0 (9547 LOC) to version 2.0.22 (40663 LOC) have been considered as a case study. Results show that the vulnerability analysis can be used to observe and monitor the evolution of security vulnerabilities in subsequent versions of the same software package. Suggestions for further research are also presented.","1550-4441","978-1-4244-1450-5","10.1109/WSE.2007.4380243","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4380243","","Authorization;Data security;Information security;Application software;Lab-on-a-chip;Runtime;Pattern analysis;Computer security;Relational databases;Flow graphs","authorisation;configuration management;flowcharting;Internet;relational databases;software prototyping;SQL;Web sites","SQL-injection security vulnerability evolution analysis;PHP;Web sites;relational database access;Web software evolution;authorization level;inter-procedural control flow graph;SQL-injection attack;publicly-available bulletin board;software package","","4","","26","IEEE","12 Nov 2007","","","IEEE","IEEE Conferences"
"Improving the Usability of E-Commerce Applications using Business Processes","Y. Zou; Q. Zhang; X. Zhao","Department of Electrical and Computer Engineering, Queen''s University Belfast, Kingston, ONT, Canada; David R. Cheriton School of Computer Science, University of Waterloo, Waterloo, ONT, Canada; Department of Electrical and Computer Engineering, Queen''s University Belfast, Kingston, ONT, Canada","IEEE Transactions on Software Engineering","5 Nov 2007","2007","33","12","837","855","E-commerce applications automate many daily business activities. Users interact with e-commerce applications through menu-driven User Interface (Ul) components such as toolbars, dialogs, and windows. However, the tremendous number of functionalities may overwhelm the users. Users struggle to locate the appropriate Ul components to accomplish the tasks required by business processes. In this paper, we enhance e-commerce applications by improving their usability using the knowledge embedded in business process definitions. Our improved application provides contextual information to fulfill each business task. The improved application guides users through the various tasks in a step-by-step fashion. Through a controlled experiment, we demonstrate that our improved application offers a better usability experience for novice users by giving them more guidance and reducing the time needed to locate the next Ul component in a complex Ul.","1939-3520","","10.1109/TSE.2007.70709","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4359465","Graphical User Interface;User Interface Reengineering;Business Process;Process Definition;and Usability;Graphical User Interface;User Interface Reengineering;Business Process;Process Definition;and Usability","Usability;Application software;Books;User interfaces;Business process re-engineering;Computer architecture;Navigation;Computer Society;Credit cards;Printing","electronic commerce;graphical user interfaces;user interface management systems","e-commerce application usability;business process task;menu-driven user interface component;contextual information","","12","3","74","IEEE","5 Nov 2007","","","IEEE","IEEE Journals"
"A Framework for Studying Clones In Large Software Systems","Z. M. Jiang; A. E. Hassan","University of Victoria, Victoria, BC, Canada; University of Victoria, Victoria, BC, Canada","Seventh IEEE International Working Conference on Source Code Analysis and Manipulation (SCAM 2007)","29 Oct 2007","2007","","","203","212","Clones are code segments that have been created by copying-and-pasting from other code segments. Clones occur often in large software systems. It is reported that 5 to 50% of the source code of a large software system is cloned. A major challenge when studying code cloning in large software systems is handling the large amount of clone candidates produced by leading edge clone detection tools. For example, the CCFinder, clone detection tool, produces over 7 million pairs of clone candidates for the Linux kernel (which consists of over 4MLOC). Moreover, the output of clone detection tools grows rapidly as a software system evolves. Researchers and developers need tools to help them study the large amount of clone data in order to better understand the clone phenomena in large systems. In this paper, we propose a data mining framework to help researchers cope with the large amount of data produced by clone detection tools. We propose techniques to reduce, abstract and highlight the most interesting data produced by clone detection tools. Our framework also introduces a visualization tool which allows users to query and explore clone data at various abstraction levels. We demonstrate our framework on a case study of the clone phenomena in the Linux kernel.","","978-0-7695-2880-9","10.1109/SCAM.2007.19","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4362914","","Cloning;Software systems;Linux;Kernel;Data mining;Data visualization","data mining;data visualisation;Linux","large software system;source code segmentation;edge clone detection tool;Linux kernel;data mining;data visualization tool","","21","","33","IEEE","29 Oct 2007","","","IEEE","IEEE Conferences"
"Fast Approximate Matching of Programs for Protecting Libre/Open Source Software by Using Spatial Indexes","A. J. M. Molina; T. Shinohara","Department of Artificial Intelligence, Kyushu Institute of Technology, Kawazu, Japan; Department of Artificial Intelligence, Kyushu Institute of Technology, Kawazu, Japan","Seventh IEEE International Working Conference on Source Code Analysis and Manipulation (SCAM 2007)","29 Oct 2007","2007","","","111","122","To encourage open source/libre software development, it is desirable to have tools that can help to identify open source license violations. This paper describes the implementation of a tool that matches open source programs embedded inside pirate programs. The problem of binary program matching can be approximated by analyzing the similarity of program fragments generated from low-level instructions. These fragments are syntax trees that can be compared by using a tree distance function. Tree distance functions are generally very costly. Sequentially calculating the similarities of fragments with them becomes prohibitively expensive. In this paper we experimentally demonstrate how a spatial index can be used to substantially increase matching performance. These techniques allowed us to do exhaustive experiments that confirmed previous results on the subject. The paper also introduces the novel idea of using information retrieval techniques for calculating the similarity of bags of program fragments. It is possible to identify programs even when they are heavily obfuscated with the innovative approach described here.","","978-0-7695-2880-9","10.1109/SCAM.2007.15","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4362903","","Protection;Open source software;Spatial indexes;Licenses;Spatial databases;Information retrieval;Data mining;Fingerprint recognition;Nearest neighbor searches;Artificial intelligence","information retrieval;public domain software;security of data","program fast approximate matching;libre software protection;open source software protection;spatial indexes;software tools;open source license violations;binary program matching;program fragment analysis;low-level instructions;syntax trees;tree distance function;information retrieval;program identification","","","3","48","IEEE","29 Oct 2007","","","IEEE","IEEE Conferences"
"Relating the Evolution of Design Patterns and Crosscutting Concerns","L. Aversano; L. Cerulo; M. D. Penta","RCOST 'Research Centre on Software Technology, University of Sannio, Benevento, Italy; RCOST 'Research Centre on Software Technology, University of Sannio, Benevento, Italy; RCOST 'Research Centre on Software Technology, University of Sannio, Benevento, Italy","Seventh IEEE International Working Conference on Source Code Analysis and Manipulation (SCAM 2007)","29 Oct 2007","2007","","","180","192","Crosscutting concerns consist in software system features having the implementation spread across modules as tangled and scattered code. In many cases, these crosscutting concerns represent design pattern clients, i.e., invocations to pattern features. When a design pattern evolves, this can cause the addition or the change of scattered and tangled code, which contributes to the evolution of the crosscutting concern. This paper empirically analyzes the relationship between design pattern evolution and the changes in the induced crosscutting concerns. Specifically, the paper investigates to what extent the crosscutting concern co-changes with the pattern, whether there is a relationship between the type of change and the induced crosscutting change, and whether different patterns induce different amount of crosscutting. The paper reports results from the analysis of Tomcat and JHotDraw evolution.","","978-0-7695-2880-9","10.1109/SCAM.2007.21","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4362912","Software Evolution;Mining Software;Repositories;Design Patterns;Crosscutting Concerns;Empirical Study.","Scattering;Pattern analysis;Software systems;Data structures;Resilience;Software design;Concrete;Open source software;Interference;Object oriented modeling","object-oriented programming;software prototyping","design pattern evolution;crosscutting concerns;pattern features;Tomcat;JHotDraw","","7","","31","IEEE","29 Oct 2007","","","IEEE","IEEE Conferences"
"Toward an Implementation of the ""Form Template Method"" Refactoring","N. Juillerat; B. Hirsbrunner","University of Freiburg, Switzerland; University of Freiburg, Switzerland","Seventh IEEE International Working Conference on Source Code Analysis and Manipulation (SCAM 2007)","29 Oct 2007","2007","","","81","90","This paper presents an implementation of the ""form template method"" refactoring. This transformation has not been automated yet, but has many similarities with other transformations such as clone detection and removal or method extraction. Forming a template method is a difficult process because it has to deal with code statements directly. Few abstractions and algorithms have been investigated yet, compared to transformations dealing with higher level aspects such as the classes, methods, fields and their relations. We present a new algorithm that performs this transformation in a semi-automated way on Java programs. We state the difficulties inherent to this transformation and propose solutions to handle them.","","978-0-7695-2880-9","10.1109/SCAM.2007.11","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4362900","","Cloning;Java;Software engineering;Entropy;Computer architecture;Degradation;Counting circuits;Standards development;Concrete","Java;object-oriented programming;software maintenance","form template method refactoring;clone detection;method extraction;code statements;classes;methods;fields;Java programs","","15","","18","IEEE","29 Oct 2007","","","IEEE","IEEE Conferences"
"On the Detection of Clones in Sensor Networks Using Random Key Predistribution","R. Brooks; P. Y. Govindaraju; M. Pirretti; N. Vijaykrishnan; M. T. Kandemir","Holcombe Department of Electrical and Computer Engineering, Clemson University, Clemson, SC, USA; Holcombe Department of Electrical and Computer Engineering, Clemson University, Clemson, SC, USA; Department of Computer Science and Engineering, Pennsylvania State University, University Park, PA, USA; Department of Computer Science and Engineering, Pennsylvania State University, University Park, PA, USA; Department of Computer Science and Engineering, Pennsylvania State University, University Park, PA, USA","IEEE Transactions on Systems, Man, and Cybernetics, Part C (Applications and Reviews)","22 Oct 2007","2007","37","6","1246","1258","Random key predistribution security schemes are well suited for use in sensor networks due to their low overhead. However, the security of a network using predistributed keys can be compromised by cloning attacks. In this attack, an adversary breaks into a sensor node, reprograms it, and inserts several copies of the node back into the sensor network. Cloning gives the adversary an easy way to build an army of malicious nodes that can cripple the sensor network. In this paper, we propose an algorithm that a sensor network can use to detect the presence of clones. Keys that are present on the cloned nodes are detected by looking at how often they are used to authenticate nodes in the network. Simulations verify that the proposed method accurately detects the presence of clones in the system and supports their removal. We quantify the extent of false positives and false negatives in the clone detection process.","1558-2442","","10.1109/TSMCC.2007.905824","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4343983","Clone detection;distributed systems;network security;sensor networks","Cloning;Peer to peer computing;Hardware;Costs;Elliptic curve cryptography;Sensor systems;Wireless sensor networks;Communication system security;Monitoring;Operating systems","cryptography;telecommunication security;wireless sensor networks","clones detection;sensor networks;random key predistribution;network security schemes;cloning attacks;clones removal","","84","","22","IEEE","22 Oct 2007","","","IEEE","IEEE Journals"
"On Evaluating Aspect Mining Techniques","G. S. Cojocar; G. Serban","Department of Computer Science, Babes Bolyai University, Cluj-Napoca, Romania; Department of Computer Science, Babes Bolyai University, Cluj-Napoca, Romania","2007 IEEE International Conference on Intelligent Computer Communication and Processing","22 Oct 2007","2007","","","217","224","Many aspect mining techniques have already been proposed, even if aspect mining is a relatively new research domain. That is why the necessity to evaluate and to compare them has emerged. In this paper we aim to evaluate a part of the existing aspect mining techniques using a new set of evaluation measures. The possibility to evaluate aspect mining techniques and the problems encountered are discussed. A comparative analysis of the considered techniques is also provided.","","978-1-4244-1491-8","10.1109/ICCP.2007.4352163","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4352163","","Computer science;Scattering;Software systems;Software engineering;Data analysis;Particle measurements","object-oriented programming;software maintenance","aspect mining techniques;identify crosscutting concerns;software systems;code scattering;code tangling;aspect oriented programming","","","","34","IEEE","22 Oct 2007","","","IEEE","IEEE Conferences"
"A Maintainable Software Architecture for Fast and Modular Bioinformatics Sequence Search","J. Archuleta; E. Tilevich; W. -c. Feng","Department of Computer Science, Virginia Polytechnic Institute and State University, Blacksburg, VA, USA; Department of Computer Science, Virginia Polytechnic Institute and State University, Blacksburg, VA, USA; Department of Computer Science, Virginia Polytechnic Institute and State University, Blacksburg, VA, USA","2007 IEEE International Conference on Software Maintenance","22 Oct 2007","2007","","","144","153","Bioinformaticists use the Basic Local Alignment Search Tool (BLAST) to characterize an unknown sequence by comparing it against a database of known sequences, thus detecting evolutionary relationships and biological properties. mpiBLAST is a widely-used, high-performance, open-source parallelization of BLAST that runs on a computer cluster delivering super-linear speedups. However, the Achilles heel of mpiBLAST is its lack of modularity, thus adversely affecting maintainability and extensibility. Alleviating this shortcoming requires an architectural refactoring to improve maintenance and extensibility while preserving high performance. Toward that end, this paper evaluates five different software architectures and details how each satisfies our design objectives. In addition, we introduce a novel approach to using mixin layers to enable mixing-and-matching of modules in constructing sequence-search applications for a variety of high-performance computing systems. Our design, which we call ""mixin layers with refined roles"", utilizes mixin layers to separate functionality into complementary modules and the refined roles in each layer improve the inherently modular design by precipitating flexible and structured parallel development, a necessity for an open-source application. We believe that this new software architecture for mpiBLAST-2.0 will benefit both the users and developers of the package and that our evaluation of different software architectures will be of value to other software engineers faced with the challenges of creating maintainable and extensible, high-performance, bioinformatics software.","1063-6773","978-1-4244-1255-6","10.1109/ICSM.2007.4362627","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4362627","","Software maintenance;Software architecture;Bioinformatics;Open source software;Application software;Databases;Biology computing;Concurrent computing;Software packages;Packaging","biology computing;information retrieval;parallel processing;public domain software;sequences;software architecture;software maintenance","maintainable software architecture;bioinformatics sequence search;basic local alignment search tool;open-source parallelization;computer cluster;software refactoring;modular design","","5","","27","IEEE","22 Oct 2007","","","IEEE","IEEE Conferences"
"Analysis and Transformation of Idiomatic Crosscutting Concerns in Legacy Software Systems","M. Bruntink","Centrum voor Wiskunde en Informatica Amsterdam, Netherlands","2007 IEEE International Conference on Software Maintenance","22 Oct 2007","2007","","","499","500","Legacy software systems often suffer from code quality problems. Maintenance of legacy systems can therefore be costly, and the value of legacy systems may diminish due to a lack of adaptability and reliability. Many code quality problems are caused by idiomatic implementation of crosscutting concerns. This work studies the idiomatic implementation of crosscutting concerns in legacy systems, and examines whether modern language technology like aspect-oriented programming can improve the situation.","1063-6773","978-1-4244-1255-6","10.1109/ICSM.2007.4362669","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4362669","","Software systems;Computer languages;Maintenance;Programming profession;Scattering;Automation;Testing;Embedded system;Costs;DSL","software maintenance;software quality;software reliability","legacy software system maintenance;idiomatic crosscutting concern;code quality problem;aspect-oriented programming;software reliability;software adaptability","","","","7","IEEE","22 Oct 2007","","","IEEE","IEEE Conferences"
"Tracing Model Elements","S. Wenzel; H. Hutter; U. Kelter","Software Engineering Group, University of Siegen, Siegen, Germany; Software Engineering Group, University of Siegen, Siegen, Germany; Software Engineering Group, University of Siegen, Siegen, Germany","2007 IEEE International Conference on Software Maintenance","22 Oct 2007","2007","","","104","113","In model-driven engineering developers work mainly or only with models, which exist in many versions. This paper presents an approach to trace single model elements or groups of elements within a version history of a model. It also offers analysis capabilities such as detection of logical coupling between model elements. The approach uses a differencing algorithm blown as SiDiff to identify similar elements in different versions of a model. SiDiff is highly configurable and thus our tracing approach can be adapted to all diagram types of the UML and to a large set of domain specific languages. The approach has been implemented as an Eclipse plug-in that visualizes all relevant information about the traces and it allows developers to interactively explore details. It has been evaluated by several groups of test persons; they considered most of the functions of the tool to be very useful.","1063-6773","978-1-4244-1255-6","10.1109/ICSM.2007.4362623","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4362623","","Object oriented modeling;Mathematical model;Power system modeling;Unified modeling language;Model driven engineering;Software engineering;History;Domain specific languages;Collaborative software;Project management","program diagnostics;software engineering;Unified Modeling Language","model-driven engineering developer;model element tracing;SiDiff;UML;domain specific language;differencing algorithm;tracing approach;Eclipse plug-in;information visualization","","12","2","32","IEEE","22 Oct 2007","","","IEEE","IEEE Conferences"
